%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: !_shablon.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Stacy
%%CreationDate: 16.12.15
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-12-16T14:42:35+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-16T14:42:35+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-16T14:42:35+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A875tHGdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:1ca99f64-dbe6-4754-a89f-986b87cf971d</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:1ca99f64-dbe6-4754-a89f-986b87cf971d</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:7e86dabd-0cfa-477f-937c-e409ce33c39e</stRef:instanceID>
            <stRef:documentID>xmp.did:7e86dabd-0cfa-477f-937c-e409ce33c39e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7e86dabd-0cfa-477f-937c-e409ce33c39e</stEvt:instanceID>
                  <stEvt:when>2015-11-23T19:46:04+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1ca99f64-dbe6-4754-a89f-986b87cf971d</stEvt:instanceID>
                  <stEvt:when>2015-12-16T14:42:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.947356 .840635 .473793 .579309 cmyk
f
296.704 342.545 mo
296.704 339.263 li
153.369 339.263 li
153.369 343.442 li
153.409 343.442 li
153.6 344.479 154.488 345.357 155.699 345.357 cv
294.426 345.357 li
295.978 345.357 296.999 343.916 296.704 342.545 cv
cp
.36173 .282292 .271336 0 cmyk
f
294.426 342.081 mo
155.699 342.081 li
153.819 342.081 152.716 339.966 153.791 338.424 cv
165.695 321.349 li
284.43 321.349 li
296.334 338.424 li
297.409 339.966 296.306 342.081 294.426 342.081 cv
cp
.169863 .120485 .123751 0 cmyk
f
162.899 335.189 mo
168.387 327.316 li
168.539 327.099 168.786 326.97 169.051 326.97 cv
281.074 326.97 li
281.339 326.97 281.586 327.099 281.738 327.316 cv
287.226 335.189 li
287.6 335.725 287.217 336.46 286.563 336.46 cv
163.562 336.46 li
162.909 336.46 162.525 335.725 162.899 335.189 cv
cp
.264164 .199466 .195499 0 cmyk
f
282.399 324.625 mo
167.727 324.625 li
164.831 324.625 162.483 322.278 162.483 319.382 cv
162.483 248.178 li
162.483 245.282 164.831 242.935 167.727 242.935 cv
282.399 242.935 li
285.294 242.935 287.642 245.282 287.642 248.178 cv
287.642 319.382 li
287.642 322.278 285.294 324.625 282.399 324.625 cv
cp
.0842603 .0573739 .057435 0 cmyk
f
280.415 250.162 mo
280.415 317.399 li
169.711 317.399 li
169.711 250.162 li
280.415 250.162 li
cp
.868376 .414313 .28217 .033814 cmyk
f
280.415 250.162 mo
280.415 317.399 li
192.475 317.399 li
262.214 250.162 li
280.415 250.162 li
cp
.815793 .285832 .2309 .00402838 cmyk
f
225.063 256.413 mo
214.721 256.413 206.308 264.826 206.308 275.167 cv
206.308 285.508 214.721 293.921 225.063 293.921 cv
235.404 293.921 243.817 285.508 243.817 275.167 cv
243.817 264.826 235.404 256.413 225.063 256.413 cv
cp
225.063 295.221 mo
214.005 295.221 205.008 286.225 205.008 275.167 cv
205.008 264.109 214.005 255.113 225.063 255.113 cv
236.12 255.113 245.117 264.109 245.117 275.167 cv
245.117 286.225 236.12 295.221 225.063 295.221 cv
cp
0 .215244 .909819 0 cmyk
f
225.712 294.571 mo
224.413 294.571 li
224.413 255.763 li
225.712 255.763 li
225.712 294.571 li
cp
f
244.467 275.817 mo
205.658 275.817 li
205.658 274.517 li
244.467 274.517 li
244.467 275.817 li
cp
f
221.508 294.765 mo
217.415 289.918 214.866 284.826 213.932 279.631 cv
213.183 275.461 213.467 271.224 214.777 267.037 cv
217.002 259.929 221.36 255.49 221.544 255.304 cv
222.466 256.221 li
222.423 256.264 218.123 260.655 216.003 267.474 cv
214.765 271.454 214.501 275.478 215.217 279.433 cv
216.115 284.39 218.566 289.266 222.502 293.926 cv
221.508 294.765 li
cp
f
228.872 294.765 mo
227.879 293.926 li
231.814 289.266 234.265 284.39 235.163 279.433 cv
235.879 275.478 235.615 271.454 234.377 267.474 cv
232.257 260.655 227.957 256.264 227.914 256.221 cv
228.836 255.304 li
229.021 255.49 233.378 259.929 235.603 267.037 cv
236.913 271.224 237.197 275.461 236.448 279.631 cv
235.514 284.826 232.965 289.918 228.872 294.765 cv
cp
f
225.668 266.45 mo
223.667 266.45 221.628 266.256 219.572 265.87 cv
214.082 264.838 210.42 262.811 210.267 262.725 cv
210.902 261.591 li
210.585 262.158 li
210.902 261.591 li
210.938 261.611 214.564 263.613 219.856 264.601 cv
222.951 265.178 226.003 265.301 228.928 264.966 cv
232.574 264.549 236.036 263.414 239.217 261.594 cv
239.863 262.722 li
236.519 264.636 232.88 265.826 229.047 266.261 cv
227.937 266.387 226.809 266.45 225.668 266.45 cv
cp
f
239.223 288.921 mo
239.187 288.901 235.562 286.899 230.269 285.911 cv
227.175 285.334 224.122 285.211 221.197 285.546 cv
217.551 285.963 214.089 287.097 210.908 288.918 cv
210.262 287.789 li
213.606 285.876 217.245 284.686 221.078 284.251 cv
224.138 283.904 227.326 284.035 230.553 284.642 cv
236.043 285.674 239.705 287.701 239.858 287.786 cv
239.223 288.921 li
cp
f
327.255 77.9072 mo
327.008 77.9072 326.762 77.8669 326.525 77.7874 cv
326.938 76.5547 li
327.042 76.5896 327.148 76.6072 327.255 76.6072 cv
328.473 76.6072 329.321 74.4939 329.321 72.5973 cv
329.321 70.7002 328.473 68.5865 327.255 68.5865 cv
327.148 68.5865 327.042 68.6041 326.938 68.639 cv
326.524 67.4064 li
326.762 67.3269 327.007 67.2865 327.255 67.2865 cv
329.142 67.2865 330.621 69.6193 330.621 72.5973 cv
330.621 75.5749 329.142 77.9072 327.255 77.9072 cv
cp
.367102 0 .958465 0 cmyk
f
327.381 93.497 mo
321.406 88.2514 li
318.195 85.4318 315.45 83.2557 312.487 81.7998 cv
309.697 80.4295 306.772 79.7331 303.285 79.6081 cv
303.332 78.3089 li
307.008 78.4407 310.1 79.1792 313.061 80.633 cv
316.152 82.1521 318.975 84.3867 322.263 87.2746 cv
326.081 90.6259 li
326.081 56.5441 li
322.263 59.8957 li
315.596 65.7496 311.063 68.5844 303.332 68.8621 cv
303.285 67.563 li
306.933 67.4319 309.991 66.6679 312.908 65.1585 cv
315.719 63.7037 318.338 61.6119 321.406 58.9188 cv
327.381 53.673 li
327.381 93.497 li
cp
f
288.225 99.0978 mo
300.4 99.0978 li
295.78 81.4455 li
288.225 81.4455 li
288.225 99.0978 li
cp
302.084 100.398 mo
286.925 100.398 li
286.925 80.1455 li
296.784 80.1455 li
302.084 100.398 li
cp
f
303.308 81.6954 mo
282.364 81.6954 li
282.364 65.4751 li
303.308 65.4751 li
303.308 81.6954 li
cp
.702144 .15375 0 0 cmyk
f
106.211 127.401 mo
73.2999 127.401 li
73.2999 104.3 li
98.5078 104.3 li
98.5078 105.6 li
74.5999 105.6 li
74.5999 126.101 li
104.911 126.101 li
104.911 111.354 li
106.211 111.354 li
106.211 127.401 li
cp
0 .757687 .962097 0 cmyk
f
89.7559 119.771 mo
89.6007 119.771 89.4455 119.715 89.322 119.605 cv
73.516 105.434 li
73.3154 105.254 73.2465 104.969 73.3428 104.718 cv
73.4391 104.466 73.6805 104.3 73.9499 104.3 cv
98.5078 104.3 li
98.8668 104.3 99.1578 104.591 99.1578 104.95 cv
99.1578 105.309 98.8668 105.6 98.5078 105.6 cv
75.6486 105.6 li
89.7559 118.248 li
100.205 108.88 li
100.472 108.64 100.883 108.663 101.123 108.93 cv
101.362 109.197 101.34 109.608 101.073 109.848 cv
90.1898 119.605 li
90.0664 119.715 89.9111 119.771 89.7559 119.771 cv
cp
f
74.4016 127.218 mo
73.4981 126.283 li
85.2004 114.974 li
86.1039 115.909 li
74.4016 127.218 li
cp
f
112.747 104.521 mo
112.747 108.517 109.507 111.757 105.51 111.757 cv
101.513 111.757 98.2732 108.517 98.2732 104.521 cv
98.2732 100.524 101.513 97.2837 105.51 97.2837 cv
109.507 97.2837 112.747 100.524 112.747 104.521 cv
cp
0 0 0 0 cmyk
f
105.11 127.218 mo
93.4073 115.909 li
94.3107 114.974 li
106.013 126.283 li
105.11 127.218 li
cp
0 .757687 .962097 0 cmyk
f
106.762 107.759 mo
104.79 107.759 li
104.79 103.953 li
104.79 103.491 104.8 103.068 104.82 102.685 cv
104.699 102.832 104.548 102.986 104.368 103.147 cv
103.551 103.821 li
102.543 102.581 li
105.012 100.57 li
106.762 100.57 li
106.762 107.759 li
cp
f
117.632 160.032 mo
151.719 160.032 li
151.719 134.33 li
117.632 134.33 li
117.632 160.032 li
cp
153.019 161.332 mo
116.332 161.332 li
116.332 133.03 li
153.019 133.03 li
153.019 161.332 li
cp
0 .215244 .909819 0 cmyk
f
117.632 170.551 mo
151.719 170.551 li
151.719 161.332 li
117.632 161.332 li
117.632 170.551 li
cp
153.019 171.851 mo
116.332 171.851 li
116.332 160.032 li
153.019 160.032 li
153.019 171.851 li
cp
f
143.487 165.123 mo
131.833 165.123 li
131.833 163.823 li
143.487 163.823 li
143.487 165.123 li
cp
f
147.75 168.107 mo
131.833 168.107 li
131.833 166.807 li
147.75 166.807 li
147.75 168.107 li
cp
f
139.737 143.116 mo
139.737 146.195 137.241 148.691 134.162 148.691 cv
131.084 148.691 128.588 146.195 128.588 143.116 cv
128.588 140.037 131.084 137.541 134.162 137.541 cv
137.241 137.541 139.737 140.037 139.737 143.116 cv
cp
0 .74844 .977508 0 cmyk
f
139.868 156.142 mo
128.457 156.142 li
128.457 154.462 li
128.457 151.311 131.012 148.757 134.162 148.757 cv
134.162 148.757 li
137.313 148.757 139.868 151.311 139.868 154.462 cv
139.868 156.142 li
cp
f
123.251 164.384 mo
122.616 164.384 122.39 164.944 122.39 165.424 cv
122.39 165.788 122.752 166.322 123.382 166.889 cv
123.815 167.279 124.299 167.616 124.645 167.828 cv
125.549 167.281 126.895 166.156 126.895 165.424 cv
126.895 164.944 126.67 164.384 126.034 164.384 cv
125.807 164.384 125.357 164.626 125.109 164.882 cv
124.643 165.363 li
124.176 164.881 li
123.928 164.626 123.479 164.384 123.251 164.384 cv
cp
124.641 169.306 mo
124.344 169.152 li
124.027 168.988 123.236 168.506 122.512 167.856 cv
121.569 167.007 121.09 166.189 121.09 165.424 cv
121.09 164.068 121.999 163.084 123.251 163.084 cv
123.725 163.084 124.235 163.307 124.643 163.587 cv
125.05 163.307 125.561 163.084 126.034 163.084 cv
127.286 163.084 128.195 164.068 128.195 165.424 cv
128.195 167.396 124.972 169.137 124.939 169.153 cv
124.641 169.306 li
cp
0 .215244 .909819 0 cmyk
f
224.398 131.158 mo
213.571 99.5154 li
238.361 91.0343 li
238.782 92.2643 li
215.222 100.325 li
225.207 129.507 li
240.464 124.287 li
240.885 125.517 li
224.398 131.158 li
cp
0 0 0 0 cmyk
f
227.539 140.342 mo
223.977 129.928 li
240.464 124.287 li
240.885 125.517 li
225.628 130.737 li
228.349 138.691 li
262.413 127.037 li
261.754 125.113 li
262.984 124.692 li
264.064 127.846 li
227.539 140.342 li
cp
f
238.571 101.394 mo
238.113 101.059 li
234.597 112.616 li
230.252 110.22 li
227.185 119.859 li
238.571 115.963 li
238.571 101.394 li
cp
0 .757687 .962097 0 cmyk
f
239.222 114.546 mo
275.224 114.546 li
275.224 83.7019 li
239.222 83.7019 li
239.222 114.546 li
cp
276.524 115.846 mo
237.922 115.846 li
237.922 82.4019 li
276.524 82.4019 li
276.524 115.846 li
cp
0 0 0 0 cmyk
f
270.595 125.552 mo
237.921 125.552 li
237.921 114.545 li
276.524 114.545 li
276.524 124.113 li
275.224 124.113 li
275.224 115.845 li
239.221 115.845 li
239.221 124.252 li
270.595 124.252 li
270.595 125.552 li
cp
f
292.974 126.45 mo
280.272 118.257 li
280.272 121.729 li
272.116 121.729 li
269.036 121.729 266.539 124.226 266.539 127.306 cv
266.539 139.517 li
275.98 139.517 li
275.98 133.009 li
275.98 131.993 276.803 131.17 277.819 131.17 cv
280.272 131.17 li
280.272 134.642 li
292.974 126.45 li
cp
0 .757687 .962097 0 cmyk
f
244.218 106.057 mo
250.239 97.9298 li
253.575 101.603 li
260.643 91.8067 li
270.595 106.057 li
244.218 106.057 li
cp
f
250.514 250.118 mo
246.511 250.118 li
243.845 250.118 241.676 247.949 241.676 245.283 cv
241.676 243.075 li
234.65 239.062 li
241.676 235.048 li
241.676 232.84 li
241.676 230.175 243.845 228.006 246.511 228.006 cv
266.638 228.006 li
269.304 228.006 271.473 230.175 271.473 232.84 cv
271.473 245.283 li
271.473 245.841 271.379 246.388 271.193 246.908 cv
269.969 246.47 li
270.104 246.091 270.173 245.691 270.173 245.283 cv
270.173 232.84 li
270.173 230.891 268.587 229.306 266.638 229.306 cv
246.511 229.306 li
244.562 229.306 242.976 230.891 242.976 232.84 cv
242.976 235.802 li
237.271 239.062 li
242.976 242.321 li
242.976 245.283 li
242.976 247.232 244.562 248.818 246.511 248.818 cv
250.514 248.818 li
250.514 250.118 li
cp
f
253.392 242.927 mo
253.392 239.356 li
253.392 238.478 253.132 238.039 252.612 238.039 cv
252.243 238.039 251.97 238.194 251.795 238.504 cv
251.619 238.814 251.532 239.329 251.532 240.05 cv
251.532 242.927 li
249.273 242.927 li
249.273 233.937 li
251.532 233.937 li
251.532 235.214 li
251.532 235.792 251.501 236.45 251.439 237.19 cv
251.543 237.19 li
251.759 236.851 252.015 236.612 252.312 236.473 cv
252.608 236.335 252.953 236.265 253.346 236.265 cv
254.078 236.265 254.647 236.476 255.053 236.898 cv
255.46 237.32 255.663 237.91 255.663 238.669 cv
255.663 242.927 li
253.392 242.927 li
cp
f
259.47 242.927 mo
257.211 242.927 li
257.211 236.381 li
259.47 236.381 li
259.47 242.927 li
cp
257.154 234.752 mo
257.154 234.413 257.248 234.16 257.437 233.995 cv
257.625 233.829 257.93 233.746 258.35 233.746 cv
258.769 233.746 259.076 233.831 259.268 234 cv
259.461 234.17 259.557 234.42 259.557 234.752 cv
259.557 235.414 259.155 235.745 258.35 235.745 cv
257.552 235.745 257.154 235.414 257.154 234.752 cv
cp
f
260.765 241.968 mo
260.765 241.617 260.869 241.345 261.077 241.15 cv
261.285 240.956 261.587 240.859 261.984 240.859 cv
262.377 240.859 262.674 240.956 262.876 241.15 cv
263.079 241.345 263.18 241.617 263.18 241.968 cv
263.18 242.315 263.075 242.585 262.865 242.78 cv
262.655 242.974 262.361 243.071 261.984 243.071 cv
261.602 243.071 261.304 242.974 261.088 242.78 cv
260.872 242.585 260.765 242.315 260.765 241.968 cv
cp
262.943 239.946 mo
261.036 239.946 li
260.741 234.48 li
263.237 234.48 li
262.943 239.946 li
cp
f
278.769 263.317 mo
278.769 260.732 li
285.134 257.095 li
278.769 253.459 li
278.769 250.874 li
278.769 248.563 276.895 246.689 274.584 246.689 cv
254.457 246.689 li
252.146 246.689 250.272 248.563 250.272 250.874 cv
250.272 263.317 li
250.272 265.628 252.146 267.501 254.457 267.501 cv
274.584 267.501 li
276.895 267.501 278.769 265.628 278.769 263.317 cv
cp
0 .226871 .9028 0 cmyk
f
271.463 255.321 mo
270.586 255.321 269.872 256.035 269.872 256.912 cv
269.872 257.79 270.586 258.504 271.463 258.504 cv
272.341 258.504 273.054 257.79 273.054 256.912 cv
273.054 256.035 272.341 255.321 271.463 255.321 cv
cp
271.463 259.804 mo
269.869 259.804 268.572 258.506 268.572 256.912 cv
268.572 255.318 269.869 254.021 271.463 254.021 cv
273.057 254.021 274.354 255.318 274.354 256.912 cv
274.354 258.506 273.057 259.804 271.463 259.804 cv
cp
0 .757687 .962097 0 cmyk
f
264.579 255.321 mo
263.702 255.321 262.988 256.035 262.988 256.912 cv
262.988 257.79 263.702 258.504 264.579 258.504 cv
265.457 258.504 266.17 257.79 266.17 256.912 cv
266.17 256.035 265.457 255.321 264.579 255.321 cv
cp
264.579 259.804 mo
262.985 259.804 261.688 258.506 261.688 256.912 cv
261.688 255.318 262.985 254.021 264.579 254.021 cv
266.173 254.021 267.47 255.318 267.47 256.912 cv
267.47 258.506 266.173 259.804 264.579 259.804 cv
cp
f
257.695 255.321 mo
256.818 255.321 256.104 256.035 256.104 256.912 cv
256.104 257.79 256.818 258.504 257.695 258.504 cv
258.573 258.504 259.286 257.79 259.286 256.912 cv
259.286 256.035 258.573 255.321 257.695 255.321 cv
cp
257.695 259.804 mo
256.101 259.804 254.804 258.506 254.804 256.912 cv
254.804 255.318 256.101 254.021 257.695 254.021 cv
259.289 254.021 260.586 255.318 260.586 256.912 cv
260.586 258.506 259.289 259.804 257.695 259.804 cv
cp
f
89.4233 193.144 mo
94.6167 196.111 li
94.6167 196.488 li
94.6167 199.562 97.1179 202.063 100.192 202.063 cv
134.166 202.063 li
137.241 202.063 139.742 199.562 139.742 196.488 cv
139.742 189.8 li
139.742 186.725 137.241 184.224 134.166 184.224 cv
100.192 184.224 li
97.1179 184.224 94.6167 186.725 94.6167 189.8 cv
94.6167 190.177 li
89.4233 193.144 li
cp
134.166 203.363 mo
100.192 203.363 li
96.5297 203.363 93.5269 200.485 93.3273 196.871 cv
86.8026 193.144 li
93.3273 189.416 li
93.5269 185.803 96.5297 182.924 100.192 182.924 cv
134.166 182.924 li
137.957 182.924 141.042 186.009 141.042 189.8 cv
141.042 196.488 li
141.042 200.279 137.957 203.363 134.166 203.363 cv
cp
.367102 0 .958465 0 cmyk
f
100.507 196.658 mo
98.4545 196.658 li
98.4545 188.944 li
103.014 188.944 li
103.014 190.616 li
100.507 190.616 li
100.507 192.088 li
102.818 192.088 li
102.818 193.761 li
100.507 193.761 li
100.507 196.658 li
cp
f
105.995 193.656 mo
105.995 194.169 106.064 194.561 106.201 194.83 cv
106.338 195.099 106.568 195.233 106.892 195.233 cv
107.212 195.233 107.438 195.099 107.57 194.83 cv
107.702 194.561 107.768 194.169 107.768 193.656 cv
107.768 193.146 107.701 192.76 107.567 192.5 cv
107.434 192.24 107.205 192.11 106.881 192.11 cv
106.565 192.11 106.338 192.239 106.201 192.497 cv
106.064 192.756 105.995 193.142 105.995 193.656 cv
cp
109.868 193.656 mo
109.868 194.634 109.605 195.396 109.079 195.943 cv
108.553 196.49 107.817 196.764 106.871 196.764 cv
105.963 196.764 105.241 196.484 104.705 195.925 cv
104.168 195.365 103.9 194.609 103.9 193.656 cv
103.9 192.681 104.163 191.924 104.689 191.384 cv
105.215 190.844 105.953 190.574 106.902 190.574 cv
107.49 190.574 108.009 190.699 108.459 190.949 cv
108.909 191.198 109.257 191.556 109.501 192.022 cv
109.746 192.489 109.868 193.033 109.868 193.656 cv
cp
f
113.108 196.658 mo
111.045 196.658 li
111.045 188.448 li
113.108 188.448 li
113.108 196.658 li
cp
f
116.601 196.658 mo
114.538 196.658 li
114.538 188.448 li
116.601 188.448 li
116.601 196.658 li
cp
f
119.867 193.656 mo
119.867 194.169 119.936 194.561 120.073 194.83 cv
120.21 195.099 120.441 195.233 120.764 195.233 cv
121.084 195.233 121.31 195.099 121.442 194.83 cv
121.574 194.561 121.64 194.169 121.64 193.656 cv
121.64 193.146 121.573 192.76 121.44 192.5 cv
121.306 192.24 121.077 192.11 120.754 192.11 cv
120.437 192.11 120.21 192.239 120.073 192.497 cv
119.936 192.756 119.867 193.142 119.867 193.656 cv
cp
123.74 193.656 mo
123.74 194.634 123.477 195.396 122.952 195.943 cv
122.426 196.49 121.689 196.764 120.743 196.764 cv
119.836 196.764 119.114 196.484 118.577 195.925 cv
118.041 195.365 117.772 194.609 117.772 193.656 cv
117.772 192.681 118.035 191.924 118.561 191.384 cv
119.087 190.844 119.825 190.574 120.775 190.574 cv
121.362 190.574 121.881 190.699 122.331 190.949 cv
122.782 191.198 123.129 191.556 123.374 192.022 cv
123.618 192.489 123.74 193.033 123.74 193.656 cv
cp
f
130.062 196.658 mo
129.386 193.809 li
129.228 192.948 li
129.123 192.257 li
129.091 192.257 li
128.919 193.242 128.802 193.863 128.743 194.12 cv
128.136 196.658 li
125.967 196.658 li
124.337 190.68 li
126.368 190.68 li
126.854 192.975 li
127.008 193.763 127.098 194.417 127.123 194.938 cv
127.154 194.938 li
127.165 194.614 127.262 193.999 127.445 193.091 cv
127.999 190.68 li
130.278 190.68 li
130.785 193.123 li
130.946 193.9 131.049 194.505 131.091 194.938 cv
131.122 194.938 li
131.144 194.671 131.179 194.337 131.228 193.938 cv
131.277 193.539 131.332 193.218 131.392 192.975 cv
131.919 190.68 li
133.908 190.68 li
132.267 196.658 li
130.062 196.658 li
cp
f
134.494 195.782 mo
134.494 195.462 134.589 195.213 134.779 195.035 cv
134.969 194.858 135.245 194.769 135.608 194.769 cv
135.966 194.769 136.238 194.858 136.423 195.035 cv
136.608 195.213 136.7 195.462 136.7 195.782 cv
136.7 196.099 136.604 196.346 136.412 196.523 cv
136.221 196.701 135.952 196.79 135.608 196.79 cv
135.259 196.79 134.987 196.701 134.79 196.523 cv
134.593 196.346 134.494 196.099 134.494 195.782 cv
cp
136.484 193.935 mo
134.742 193.935 li
134.473 188.944 li
136.753 188.944 li
136.484 193.935 li
cp
f
289.698 182.085 mo
287.513 182.085 285.735 183.863 285.735 186.048 cv
285.735 226.869 li
285.735 229.055 287.513 230.832 289.698 230.832 cv
321.796 230.832 li
323.981 230.832 325.759 229.055 325.759 226.869 cv
325.759 186.048 li
325.759 183.863 323.981 182.085 321.796 182.085 cv
289.698 182.085 li
cp
321.796 232.132 mo
289.698 232.132 li
286.796 232.132 284.435 229.771 284.435 226.869 cv
284.435 186.048 li
284.435 183.146 286.796 180.785 289.698 180.785 cv
321.796 180.785 li
324.698 180.785 327.059 183.146 327.059 186.048 cv
327.059 226.869 li
327.059 229.771 324.698 232.132 321.796 232.132 cv
cp
0 .215244 .909819 0 cmyk
f
289.698 182.085 mo
287.513 182.085 285.735 183.863 285.735 186.048 cv
285.735 226.869 li
285.735 229.055 287.513 230.832 289.698 230.832 cv
292.537 230.832 li
292.537 182.085 li
289.698 182.085 li
cp
293.837 232.132 mo
289.698 232.132 li
286.796 232.132 284.435 229.771 284.435 226.869 cv
284.435 186.048 li
284.435 183.146 286.796 180.785 289.698 180.785 cv
293.837 180.785 li
293.837 232.132 li
cp
f
287.898 189.806 mo
282.356 189.806 li
282.356 188.506 li
287.898 188.506 li
287.898 189.806 li
cp
f
287.898 196.727 mo
282.356 196.727 li
282.356 195.427 li
287.898 195.427 li
287.898 196.727 li
cp
f
287.898 203.648 mo
282.356 203.648 li
282.356 202.348 li
287.898 202.348 li
287.898 203.648 li
cp
f
287.898 210.569 mo
282.356 210.569 li
282.356 209.269 li
287.898 209.269 li
287.898 210.569 li
cp
f
287.898 217.49 mo
282.356 217.49 li
282.356 216.19 li
287.898 216.19 li
287.898 217.49 li
cp
f
287.898 224.411 mo
282.356 224.411 li
282.356 223.111 li
287.898 223.111 li
287.898 224.411 li
cp
f
316.553 200.233 mo
316.553 204.268 313.282 207.539 309.247 207.539 cv
305.213 207.539 301.942 204.268 301.942 200.233 cv
301.942 196.199 305.213 192.928 309.247 192.928 cv
313.282 192.928 316.553 196.199 316.553 200.233 cv
cp
0 .74844 .977508 0 cmyk
f
316.724 217.304 mo
301.771 217.304 li
301.771 215.102 li
301.771 210.973 305.118 207.625 309.247 207.625 cv
309.247 207.625 li
313.377 207.625 316.724 210.973 316.724 215.102 cv
316.724 217.304 li
cp
f
250.879 206.849 mo
265.632 212.587 li
269.835 186.076 li
250.879 206.849 li
cp
266.148 214.135 mo
266.068 214.135 265.988 214.12 265.912 214.091 cv
249.525 207.717 li
249.325 207.64 249.176 207.468 249.127 207.26 cv
249.079 207.051 249.136 206.832 249.28 206.673 cv
270.336 183.597 li
270.53 183.385 270.84 183.325 271.098 183.45 cv
271.357 183.574 271.503 183.854 271.458 184.137 cv
266.79 213.587 li
266.759 213.781 266.642 213.951 266.471 214.048 cv
266.372 214.106 266.26 214.135 266.148 214.135 cv
cp
.367102 0 .958465 0 cmyk
f
231.195 198.467 mo
242.13 203.154 li
266.556 186.201 li
254.51 190.379 li
254.51 190.379 li
242.071 194.695 li
231.195 198.467 li
cp
242.205 204.543 mo
242.118 204.543 242.031 204.525 241.949 204.49 cv
229.14 199 li
228.893 198.895 228.737 198.648 228.746 198.38 cv
228.756 198.112 228.929 197.877 229.183 197.789 cv
241.645 193.467 li
254.084 189.151 li
254.084 189.151 li
270.604 183.422 li
270.911 183.315 271.249 183.452 271.396 183.741 cv
271.544 184.031 271.454 184.385 271.188 184.57 cv
242.576 204.427 li
242.465 204.504 242.336 204.543 242.205 204.543 cv
cp
f
245.696 217.412 mo
245.682 217.412 245.667 217.412 245.653 217.411 cv
245.376 217.392 245.141 217.2 245.069 216.933 cv
241.578 204.063 li
241.484 203.717 241.688 203.36 242.035 203.266 cv
242.381 203.172 242.738 203.376 242.832 203.723 cv
245.829 214.771 li
249.161 206.859 li
249.301 206.528 249.682 206.373 250.013 206.512 cv
250.343 206.652 250.499 207.033 250.359 207.364 cv
246.295 217.015 li
246.193 217.257 245.956 217.412 245.696 217.412 cv
cp
f
245.696 217.412 mo
245.54 217.412 245.383 217.356 245.258 217.243 cv
244.993 217.001 244.974 216.59 245.215 216.325 cv
252.474 208.356 li
252.716 208.09 253.127 208.071 253.392 208.313 cv
253.658 208.555 253.677 208.966 253.435 209.231 cv
246.177 217.2 li
246.048 217.341 245.872 217.412 245.696 217.412 cv
cp
f
253.919 188.205 mo
253.919 192.11 250.753 195.275 246.848 195.275 cv
242.943 195.275 239.778 192.11 239.778 188.205 cv
239.778 184.3 242.943 181.134 246.848 181.134 cv
250.753 181.134 253.919 184.3 253.919 188.205 cv
cp
.702144 .15375 0 0 cmyk
f
248.314 191.919 mo
246.217 191.919 li
246.217 187.872 li
246.217 187.38 246.228 186.931 246.249 186.523 cv
246.12 186.68 245.959 186.843 245.768 187.014 cv
244.9 187.731 li
243.828 186.413 li
246.453 184.274 li
248.314 184.274 li
248.314 191.919 li
cp
0 0 0 0 cmyk
f
200.195 233.895 mo
157.612 233.895 li
152.818 233.895 148.918 229.995 148.918 225.201 cv
148.918 194.978 li
148.918 190.184 152.818 186.284 157.612 186.284 cv
212.097 186.284 li
216.891 186.284 220.791 190.184 220.791 194.978 cv
220.791 219.573 li
219.491 219.573 li
219.491 194.978 li
219.491 190.901 216.174 187.584 212.097 187.584 cv
157.612 187.584 li
153.535 187.584 150.218 190.901 150.218 194.978 cv
150.218 225.201 li
150.218 229.278 153.535 232.595 157.612 232.595 cv
200.195 232.595 li
200.195 233.895 li
cp
f
200.195 233.895 mo
162.128 233.895 li
162.128 186.284 li
212.747 186.284 li
212.747 216.07 li
211.447 216.07 li
211.447 187.584 li
163.428 187.584 li
163.428 232.595 li
200.195 232.595 li
200.195 233.895 li
cp
f
157.171 214.196 mo
155.871 214.196 li
155.871 205.983 li
157.171 205.983 li
157.171 214.196 li
cp
f
195.64 215.403 mo
197.736 213.264 199.365 210.842 199.365 208.534 cv
199.365 204.648 196.959 201.497 193.074 201.497 cv
191.09 201.497 188.558 203.072 187.279 204.391 cv
186 203.072 183.467 201.497 181.485 201.497 cv
177.598 201.497 175.193 204.648 175.193 208.534 cv
175.193 214.079 184.565 220.251 187.279 221.655 cv
187.971 221.301 189.11 220.625 190.421 219.721 cv
195.64 215.403 li
cp
0 .757687 .962097 0 cmyk
f
193.02 214.848 mo
192.323 214.848 191.625 215.113 191.094 215.644 cv
190.032 216.706 190.032 218.435 191.094 219.497 cv
199.015 227.418 li
199.562 227.965 199.927 228.656 200.069 229.416 cv
200.593 232.221 li
200.8 233.331 201.332 234.34 202.131 235.139 cv
208.481 241.49 li
209.519 242.527 210.74 243.321 212.109 243.848 cv
215.583 245.186 li
216.451 245.52 217.436 245.311 218.094 244.653 cv
228.055 234.692 li
228.726 234.021 228.929 233.021 228.572 232.142 cv
227.173 228.69 li
226.645 227.389 225.875 226.226 224.882 225.233 cv
216.697 217.048 li
215.74 216.091 214.184 216.091 213.227 217.048 cv
212.768 217.507 li
212.308 217.048 li
211.274 216.014 209.591 216.014 208.557 217.048 cv
206.92 218.685 li
206.042 217.807 li
205.064 216.829 203.473 216.829 202.495 217.807 cv
200.668 219.633 li
200.185 220.117 199.58 219.645 198.995 219.189 cv
198.59 218.872 198.046 218.418 197.381 217.838 cv
196.266 216.867 195.087 215.785 194.947 215.644 cv
194.416 215.113 193.718 214.848 193.02 214.848 cv
cp
216.427 246.642 mo
215.986 246.642 215.542 246.563 215.116 246.399 cv
211.642 245.061 li
210.102 244.468 208.729 243.576 207.562 242.409 cv
201.211 236.058 li
200.227 235.073 199.571 233.829 199.315 232.46 cv
198.791 229.655 li
198.697 229.154 198.457 228.698 198.096 228.337 cv
190.175 220.416 li
188.606 218.847 188.606 216.294 190.175 214.725 cv
191.744 213.156 194.297 213.156 195.866 214.725 cv
196.188 215.046 199.059 217.641 200.079 218.384 cv
201.576 216.887 li
203.047 215.416 205.432 215.403 206.92 216.847 cv
207.638 216.129 li
209.035 214.732 211.225 214.601 212.77 215.736 cv
214.236 214.68 216.298 214.811 217.616 216.129 cv
225.801 224.314 li
226.918 225.43 227.784 226.738 228.378 228.201 cv
229.777 231.654 li
230.33 233.017 230.015 234.571 228.975 235.611 cv
219.013 245.572 li
218.315 246.27 217.379 246.642 216.427 246.642 cv
cp
0 0 0 0 cmyk
f
323.06 169.249 mo
365.519 169.249 li
365.519 137.135 li
323.06 137.135 li
323.06 169.249 li
cp
366.819 170.549 mo
321.76 170.549 li
321.76 135.835 li
366.819 135.835 li
366.819 170.549 li
cp
f
323.06 143.303 mo
365.519 143.303 li
365.519 137.135 li
323.06 137.135 li
323.06 143.303 li
cp
366.819 144.603 mo
321.76 144.603 li
321.76 135.835 li
366.819 135.835 li
366.819 144.603 li
cp
f
338.756 149.032 mo
351.795 156.56 li
338.756 164.087 li
338.756 149.032 li
cp
.702144 .15375 0 0 cmyk
f
328.082 140.219 mo
328.082 140.806 327.606 141.281 327.019 141.281 cv
326.433 141.281 325.957 140.806 325.957 140.219 cv
325.957 139.633 326.433 139.157 327.019 139.157 cv
327.606 139.157 328.082 139.633 328.082 140.219 cv
cp
0 0 0 0 cmyk
f
331.521 140.219 mo
331.521 140.806 331.046 141.281 330.459 141.281 cv
329.872 141.281 329.397 140.806 329.397 140.219 cv
329.397 139.633 329.872 139.157 330.459 139.157 cv
331.046 139.157 331.521 139.633 331.521 140.219 cv
cp
f
334.961 140.219 mo
334.961 140.806 334.485 141.281 333.898 141.281 cv
333.312 141.281 332.836 140.806 332.836 140.219 cv
332.836 139.633 333.312 139.157 333.898 139.157 cv
334.485 139.157 334.961 139.633 334.961 140.219 cv
cp
f
139.088 82.9628 mo
133.949 82.9628 129.769 78.7819 129.769 73.6429 cv
129.769 68.5039 133.949 64.323 139.088 64.323 cv
141.211 64.323 143.288 65.0557 144.937 66.386 cv
144.121 67.3978 li
142.702 66.2533 140.915 65.623 139.088 65.623 cv
134.666 65.623 131.069 69.2207 131.069 73.6429 cv
131.069 78.0651 134.666 81.6628 139.088 81.6628 cv
142.977 81.6628 146.297 78.8897 146.982 75.0691 cv
148.261 75.2985 li
147.465 79.7395 143.607 82.9628 139.088 82.9628 cv
cp
.367102 0 .958465 0 cmyk
f
147.961 94.5508 mo
129.566 94.5508 li
129.566 91.2883 li
129.566 86.0373 133.837 81.7653 139.088 81.7653 cv
141.632 81.7653 144.023 82.7557 145.822 84.554 cv
145.885 84.6162 145.944 84.678 146.003 84.741 cv
145.051 85.6263 li
145.003 85.5747 144.954 85.5239 144.903 85.4732 cv
143.35 83.9206 141.284 83.0653 139.088 83.0653 cv
134.554 83.0653 130.866 86.7542 130.866 91.2883 cv
130.866 93.2508 li
147.961 93.2508 li
147.961 94.5508 li
cp
f
155.864 56.6869 mo
149.966 56.6869 145.166 61.486 145.166 67.3849 cv
145.166 73.2838 149.966 78.0829 155.864 78.0829 cv
161.763 78.0829 166.562 73.2838 166.562 67.3849 cv
166.562 61.486 161.763 56.6869 155.864 56.6869 cv
cp
155.864 79.3829 mo
149.249 79.3829 143.866 74.0006 143.866 67.3849 cv
143.866 60.7692 149.249 55.3869 155.864 55.3869 cv
162.48 55.3869 167.862 60.7692 167.862 67.3849 cv
167.862 74.0006 162.48 79.3829 155.864 79.3829 cv
cp
f
168.127 94.5508 mo
160.042 94.5508 li
160.042 93.2508 li
166.827 93.2508 li
166.827 90.4811 li
166.827 88.7832 166.45 87.1564 165.706 85.6458 cv
166.872 85.0713 li
167.705 86.7622 168.127 88.5823 168.127 90.4811 cv
168.127 94.5508 li
cp
f
155.865 94.5508 mo
143.601 94.5508 li
143.601 90.4811 li
143.601 83.7186 149.102 78.2169 155.864 78.2169 cv
158.919 78.2169 161.845 79.3464 164.104 81.3973 cv
163.23 82.3598 li
161.211 80.5266 158.595 79.5169 155.864 79.5169 cv
149.819 79.5169 144.901 84.4354 144.901 90.4811 cv
144.901 93.2508 li
155.865 93.2508 li
155.865 94.5508 li
cp
f
175.476 99.5421 mo
172.293 103.21 166.738 103.603 163.07 100.419 cv
159.402 97.2352 159.009 91.6807 162.193 88.0127 cv
165.377 84.3446 170.931 83.952 174.599 87.1358 cv
178.267 90.3195 178.66 95.874 175.476 99.5421 cv
cp
159.04 85.2756 mo
154.344 90.6852 154.923 98.877 160.333 103.572 cv
165.743 108.268 173.934 107.689 178.63 102.279 cv
183.325 96.8695 182.746 88.6777 177.337 83.9823 cv
171.927 79.2869 163.735 79.8659 159.04 85.2756 cv
cp
.702144 .15375 0 0 cmyk
f
183.925 107.845 mo
178.198 102.765 li
179.061 101.793 li
184.788 106.873 li
183.925 107.845 li
cp
.367102 0 .958465 0 cmyk
f
186.122 107.205 mo
186.082 107.205 186.041 107.206 186.001 107.209 cv
185.552 107.241 185.142 107.445 184.847 107.785 cv
184.552 108.125 184.407 108.559 184.439 109.008 cv
184.471 109.457 184.675 109.867 185.015 110.162 cv
193.591 117.605 li
193.931 117.9 194.365 118.046 194.814 118.014 cv
195.263 117.982 195.673 117.777 195.968 117.437 cv
196.577 116.736 196.501 115.67 195.8 115.061 cv
187.224 107.617 li
186.915 107.349 186.527 107.205 186.122 107.205 cv
cp
194.691 119.318 mo
193.973 119.318 193.286 119.063 192.739 118.587 cv
184.163 111.144 li
183.561 110.621 183.198 109.895 183.142 109.1 cv
183.086 108.305 183.343 107.535 183.865 106.933 cv
184.388 106.331 185.114 105.968 185.909 105.912 cv
186.704 105.856 187.474 106.113 188.076 106.635 cv
196.652 114.079 li
197.895 115.158 198.028 117.047 196.949 118.29 cv
196.949 118.29 li
196.427 118.892 195.701 119.254 194.906 119.31 cv
194.834 119.315 194.762 119.318 194.691 119.318 cv
cp
f
183.693 77.9675 mo
182.393 77.9675 li
182.393 64.973 li
183.693 64.973 li
183.693 77.9675 li
cp
0 0 0 0 cmyk
f
189.54 72.1203 mo
176.546 72.1203 li
176.546 70.8203 li
189.54 70.8203 li
189.54 72.1203 li
cp
f
142.999 111.552 mo
141.699 111.552 li
141.699 101.944 li
142.999 101.944 li
142.999 111.552 li
cp
f
147.153 107.398 mo
137.546 107.398 li
137.546 106.098 li
147.153 106.098 li
147.153 107.398 li
cp
f
226.497 174.767 mo
226.497 177.035 224.658 178.875 222.389 178.875 cv
220.121 178.875 218.281 177.035 218.281 174.767 cv
218.281 172.498 220.121 170.659 222.389 170.659 cv
224.658 170.659 226.497 172.498 226.497 174.767 cv
cp
0 .215244 .909819 0 cmyk
f
216.157 167.41 mo
215.315 166.42 li
217.285 164.745 219.797 163.823 222.389 163.823 cv
224.95 163.823 227.44 164.727 229.402 166.367 cv
228.569 167.364 li
226.84 165.919 224.645 165.123 222.389 165.123 cv
220.105 165.123 217.892 165.935 216.157 167.41 cv
cp
f
210.638 160.897 mo
209.796 159.906 li
213.305 156.926 217.777 155.285 222.389 155.285 cv
226.95 155.285 231.384 156.893 234.874 159.812 cv
234.04 160.809 li
230.783 158.085 226.646 156.585 222.389 156.585 cv
218.085 156.585 213.912 158.117 210.638 160.897 cv
cp
f
204.498 153.653 mo
203.657 152.661 li
208.88 148.233 215.532 145.794 222.389 145.794 cv
229.168 145.794 235.761 148.184 240.956 152.524 cv
240.122 153.521 li
235.161 149.377 228.864 147.094 222.389 147.094 cv
215.84 147.094 209.486 149.423 204.498 153.653 cv
cp
f
86.3999 150.696 mo
105.981 158.205 li
107.312 153.05 li
87.731 145.541 li
86.3999 150.696 li
cp
106.875 159.941 mo
84.851 151.495 li
86.8364 143.806 li
108.86 152.252 li
106.875 159.941 li
cp
0 0 0 0 cmyk
f
103.131 174.441 mo
101.872 174.116 li
107.457 152.489 li
108.715 152.814 li
103.131 174.441 li
cp
f
82.3284 166.464 mo
81.0697 166.139 li
86.6543 144.511 li
87.913 144.836 li
82.3284 166.464 li
cp
f
76.1051 164.857 mo
75.9339 165.52 76.0311 166.21 76.3789 166.8 cv
76.7267 167.39 77.2834 167.809 77.9464 167.98 cv
78.6095 168.151 79.2995 168.054 79.8895 167.706 cv
80.4793 167.358 80.8985 166.802 81.0697 166.139 cv
81.4231 164.77 80.5971 163.369 79.2284 163.015 cv
77.8598 162.662 76.4585 163.488 76.1051 164.857 cv
76.1051 164.857 li
cp
78.594 169.363 mo
78.2698 169.363 77.9436 169.322 77.6214 169.239 cv
76.6222 168.981 75.7832 168.349 75.259 167.46 cv
74.7349 166.571 74.5883 165.531 74.8464 164.532 cv
74.8464 164.532 li
75.3791 162.469 77.4909 161.224 79.5534 161.757 cv
81.6162 162.289 82.8611 164.401 82.3284 166.464 cv
82.0704 167.463 81.4387 168.302 80.5497 168.826 cv
79.9472 169.181 79.2754 169.363 78.594 169.363 cv
cp
f
99.3854 170.91 mo
98.9333 170.91 98.4875 171.031 98.0878 171.267 cv
97.4978 171.614 97.0787 172.171 96.9075 172.834 cv
96.9075 172.834 li
96.7362 173.497 96.8335 174.187 97.1813 174.777 cv
97.5291 175.367 98.0857 175.786 98.7488 175.957 cv
99.4118 176.129 100.102 176.032 100.692 175.684 cv
101.282 175.336 101.701 174.779 101.872 174.116 cv
102.043 173.453 101.946 172.763 101.598 172.173 cv
101.25 171.583 100.694 171.164 100.031 170.993 cv
99.817 170.938 99.6004 170.91 99.3854 170.91 cv
cp
99.3964 177.34 mo
99.0722 177.34 98.7459 177.299 98.4238 177.216 cv
97.4245 176.958 96.5855 176.326 96.0614 175.437 cv
95.5373 174.548 95.3907 173.508 95.6488 172.509 cv
95.9068 171.51 96.5385 170.671 97.4275 170.147 cv
98.3167 169.623 99.3566 169.476 100.356 169.734 cv
101.355 169.992 102.194 170.624 102.718 171.513 cv
103.242 172.402 103.389 173.442 103.131 174.441 cv
102.873 175.44 102.241 176.279 101.352 176.804 cv
100.75 177.159 100.078 177.34 99.3964 177.34 cv
cp
f
272.518 163.612 mo
282.277 163.612 li
282.42 164.069 li
283.149 166.401 284.634 168.496 286.603 169.967 cv
288.639 171.487 291.062 172.291 293.61 172.291 cv
300.073 172.291 305.331 167.032 305.331 160.569 cv
305.331 154.106 300.073 148.848 293.61 148.848 cv
261.185 148.848 li
254.722 148.848 249.464 154.106 249.464 160.569 cv
249.464 167.032 254.722 172.291 261.185 172.291 cv
263.734 172.291 266.157 171.487 268.192 169.967 cv
270.161 168.496 271.647 166.401 272.375 164.069 cv
272.518 163.612 li
cp
293.61 173.591 mo
290.779 173.591 288.087 172.698 285.825 171.008 cv
283.768 169.471 282.185 167.321 281.331 164.912 cv
273.464 164.912 li
272.61 167.321 271.028 169.471 268.97 171.008 cv
266.708 172.698 264.016 173.591 261.185 173.591 cv
254.005 173.591 248.164 167.749 248.164 160.569 cv
248.164 153.389 254.005 147.548 261.185 147.548 cv
293.61 147.548 li
300.79 147.548 306.631 153.389 306.631 160.569 cv
306.631 167.749 300.79 173.591 293.61 173.591 cv
cp
0 .757687 .962097 0 cmyk
f
262.503 164.45 mo
261.203 164.45 li
261.203 155.893 li
262.503 155.893 li
262.503 164.45 li
cp
f
266.132 160.821 mo
257.575 160.821 li
257.575 159.521 li
266.132 159.521 li
266.132 160.821 li
cp
f
295.489 155.954 mo
295.489 156.876 294.741 157.624 293.818 157.624 cv
292.896 157.624 292.148 156.876 292.148 155.954 cv
292.148 155.031 292.896 154.283 293.818 154.283 cv
294.741 154.283 295.489 155.031 295.489 155.954 cv
cp
f
295.489 163.843 mo
295.489 164.766 294.741 165.513 293.818 165.513 cv
292.896 165.513 292.148 164.766 292.148 163.843 cv
292.148 162.921 292.896 162.173 293.818 162.173 cv
294.741 162.173 295.489 162.921 295.489 163.843 cv
cp
f
297.763 161.569 mo
296.84 161.569 296.093 160.821 296.093 159.898 cv
296.093 158.976 296.84 158.228 297.763 158.228 cv
298.686 158.228 299.433 158.976 299.433 159.898 cv
299.433 160.821 298.686 161.569 297.763 161.569 cv
cp
f
289.874 161.569 mo
288.951 161.569 288.203 160.821 288.203 159.898 cv
288.203 158.976 288.951 158.228 289.874 158.228 cv
290.796 158.228 291.544 158.976 291.544 159.898 cv
291.544 160.821 290.796 161.569 289.874 161.569 cv
cp
f
361.05 126.24 mo
347.001 126.24 li
344.353 126.24 342.199 124.086 342.199 121.439 cv
342.199 93.3168 li
342.199 90.6692 344.353 88.5152 347.001 88.5152 cv
359.437 88.5152 li
359.796 88.5152 360.087 88.8063 360.087 89.1652 cv
360.087 89.5242 359.796 89.8152 359.437 89.8152 cv
347.001 89.8152 li
345.07 89.8152 343.499 91.386 343.499 93.3168 cv
343.499 121.439 li
343.499 123.369 345.07 124.94 347.001 124.94 cv
361.05 124.94 li
362.982 124.94 364.553 123.369 364.553 121.439 cv
364.553 108.983 li
364.553 108.624 364.844 108.333 365.203 108.333 cv
365.562 108.333 365.853 108.624 365.853 108.983 cv
365.853 121.439 li
365.853 124.086 363.699 126.24 361.05 126.24 cv
cp
0 .215244 .909819 0 cmyk
f
365.203 119.422 mo
342.849 119.422 li
342.49 119.422 342.199 119.131 342.199 118.772 cv
342.199 93.3168 li
342.199 92.9578 342.49 92.6668 342.849 92.6668 cv
355.704 92.6668 li
356.063 92.6668 356.354 92.9578 356.354 93.3168 cv
356.354 93.6758 356.063 93.9668 355.704 93.9668 cv
343.499 93.9668 li
343.499 118.122 li
364.553 118.122 li
364.553 108.983 li
364.553 108.624 364.844 108.333 365.203 108.333 cv
365.562 108.333 365.853 108.624 365.853 108.983 cv
365.853 118.772 li
365.853 119.131 365.562 119.422 365.203 119.422 cv
cp
f
356.146 122.651 mo
351.906 122.651 li
351.547 122.651 351.256 122.36 351.256 122.001 cv
351.256 121.642 351.547 121.351 351.906 121.351 cv
356.146 121.351 li
356.505 121.351 356.796 121.642 356.796 122.001 cv
356.796 122.36 356.505 122.651 356.146 122.651 cv
cp
f
372.939 105.827 mo
377.149 101.617 377.149 94.7909 372.939 90.5809 cv
368.729 86.3709 361.903 86.3709 357.693 90.5809 cv
354.496 93.7783 353.727 98.4842 355.387 102.407 cv
354.31 109.21 li
361.112 108.133 li
361.112 108.133 li
365.035 109.792 369.741 109.024 372.939 105.827 cv
cp
0 .74844 .977508 0 cmyk
f
359.452 102.188 mo
371.264 102.188 li
371.264 94.4454 li
359.452 94.4454 li
359.452 102.188 li
cp
371.914 103.488 mo
358.802 103.488 li
358.443 103.488 358.152 103.197 358.152 102.838 cv
358.152 93.7954 li
358.152 93.4364 358.443 93.1454 358.802 93.1454 cv
371.914 93.1454 li
372.273 93.1454 372.564 93.4364 372.564 93.7954 cv
372.564 102.838 li
372.564 103.197 372.273 103.488 371.914 103.488 cv
cp
0 .215244 .909819 0 cmyk
f
360.5 94.4454 mo
365.358 98.8001 li
370.215 94.4454 li
360.5 94.4454 li
cp
365.358 100.323 mo
365.203 100.323 365.047 100.268 364.924 100.157 cv
358.368 94.2793 li
358.167 94.0995 358.098 93.8147 358.195 93.5631 cv
358.291 93.3115 358.532 93.1454 358.802 93.1454 cv
371.914 93.1454 li
372.183 93.1454 372.425 93.3115 372.521 93.5631 cv
372.617 93.8147 372.548 94.0995 372.348 94.2793 cv
365.792 100.157 li
365.668 100.268 365.513 100.323 365.358 100.323 cv
cp
f
310.204 104.177 mo
322.804 116.777 li
326.485 113.095 li
313.886 100.495 li
310.204 104.177 li
cp
322.804 118.346 mo
322.631 118.346 322.466 118.277 322.344 118.155 cv
308.825 104.637 li
308.703 104.515 308.635 104.349 308.635 104.177 cv
308.635 104.005 308.703 103.839 308.825 103.717 cv
313.426 99.1165 li
313.68 98.8626 314.091 98.8627 314.345 99.1165 cv
327.864 112.635 li
328.118 112.889 328.118 113.301 327.864 113.555 cv
323.263 118.155 li
323.141 118.277 322.976 118.346 322.804 118.346 cv
cp
0 .757687 .962097 0 cmyk
f
323.965 117.453 mo
329.226 119.518 li
327.162 114.257 li
323.965 117.453 li
cp
330.375 121.317 mo
330.296 121.317 330.215 121.302 330.138 121.272 cv
322.566 118.301 li
322.362 118.221 322.212 118.043 322.167 117.829 cv
322.122 117.614 322.189 117.391 322.344 117.236 cv
326.945 112.635 li
327.1 112.48 327.322 112.414 327.537 112.459 cv
327.752 112.503 327.929 112.653 328.009 112.858 cv
330.981 120.43 li
331.075 120.67 331.018 120.944 330.835 121.127 cv
330.711 121.251 330.545 121.317 330.375 121.317 cv
cp
f
310.204 104.177 mo
313.514 107.487 li
317.195 103.805 li
313.886 100.495 li
310.204 104.177 li
cp
313.514 109.056 mo
313.341 109.056 313.176 108.988 313.054 108.866 cv
308.825 104.637 li
308.571 104.383 308.571 103.971 308.825 103.717 cv
313.426 99.1165 li
313.548 98.9946 313.713 98.9261 313.886 98.9261 cv
314.058 98.9261 314.223 98.9946 314.345 99.1165 cv
318.574 103.346 li
318.828 103.6 318.828 104.011 318.574 104.265 cv
313.973 108.866 li
313.852 108.988 313.686 109.056 313.514 109.056 cv
cp
f
330.375 126.057 mo
315.497 126.057 li
315.138 126.057 314.847 125.766 314.847 125.407 cv
314.847 125.048 315.138 124.757 315.497 124.757 cv
330.375 124.757 li
330.734 124.757 331.025 125.048 331.025 125.407 cv
331.025 125.766 330.734 126.057 330.375 126.057 cv
cp
f
338.805 201.361 mo
339.202 201.572 341.145 202.538 343.78 202.753 cv
347.694 203.072 351.223 201.662 354.27 198.566 cv
357.622 195.159 359.16 191.471 358.842 187.604 cv
358.625 184.965 357.571 183.129 357.375 182.808 cv
354.632 180.065 li
349.873 184.824 li
352.658 187.609 li
352.766 187.707 352.874 187.845 353.006 188.026 cv
353.244 188.353 353.444 188.711 353.601 189.09 cv
353.982 190.009 354.078 190.971 353.887 191.949 cv
353.637 193.223 352.899 194.48 351.692 195.687 cv
349.987 197.392 348.216 198.152 346.427 197.944 cv
345.027 197.782 344.076 197.065 343.733 196.765 cv
343.722 196.755 343.711 196.745 343.701 196.735 cv
340.907 193.939 li
336.207 198.639 li
338.805 201.361 li
cp
344.803 204.094 mo
344.387 204.094 343.991 204.076 343.617 204.044 cv
340.392 203.768 338.171 202.499 338.079 202.445 cv
338.025 202.414 337.977 202.376 337.934 202.331 cv
334.828 199.077 li
334.585 198.821 334.589 198.418 334.839 198.168 cv
340.447 192.56 li
340.569 192.438 340.734 192.37 340.907 192.37 cv
340.907 192.37 li
341.079 192.37 341.245 192.438 341.367 192.56 cv
344.604 195.799 li
344.821 195.986 345.537 196.532 346.576 196.653 cv
347.95 196.812 349.362 196.178 350.773 194.768 cv
352.273 193.268 352.894 191.77 352.619 190.317 cv
352.412 189.226 351.753 188.542 351.747 188.535 cv
348.494 185.283 li
348.241 185.03 348.241 184.618 348.494 184.364 cv
354.173 178.686 li
354.295 178.564 354.46 178.495 354.632 178.495 cv
354.632 178.495 li
354.805 178.495 354.97 178.564 355.092 178.686 cv
358.347 181.941 li
358.377 181.971 358.404 182.004 358.428 182.04 cv
358.486 182.126 359.85 184.205 360.132 187.428 cv
360.39 190.375 359.743 194.857 355.196 199.478 cv
351.551 203.182 347.705 204.094 344.803 204.094 cv
cp
.367102 0 .958465 0 cmyk
f
338.776 202.533 mo
338.61 202.533 338.444 202.469 338.317 202.343 cv
338.063 202.09 338.062 201.678 338.316 201.424 cv
341.491 198.237 li
341.744 197.983 342.156 197.982 342.41 198.236 cv
342.664 198.489 342.665 198.901 342.412 199.155 cv
339.237 202.341 li
339.11 202.469 338.943 202.533 338.776 202.533 cv
cp
f
352.339 188.859 mo
352.174 188.859 352.009 188.796 351.882 188.671 cv
351.627 188.419 351.625 188.007 351.877 187.752 cv
355.112 184.482 li
355.364 184.227 355.776 184.225 356.031 184.477 cv
356.286 184.73 356.288 185.141 356.036 185.397 cv
352.801 188.666 li
352.674 188.795 352.507 188.859 352.339 188.859 cv
cp
f
199.633 96.6918 mo
204.548 96.6918 li
204.548 91.623 li
209.617 91.623 li
209.617 86.7075 li
204.548 86.7075 li
204.548 81.6386 li
199.633 81.6386 li
199.633 86.7075 li
194.564 86.7075 li
194.564 91.623 li
199.633 91.623 li
199.633 96.6918 li
cp
205.848 97.9918 mo
198.333 97.9918 li
198.333 92.923 li
193.264 92.923 li
193.264 85.4075 li
198.333 85.4075 li
198.333 80.3386 li
205.848 80.3386 li
205.848 85.4075 li
210.917 85.4075 li
210.917 92.923 li
205.848 92.923 li
205.848 97.9918 li
cp
0 .215244 .909819 0 cmyk
f
311.6 134.147 mo
307.786 134.147 li
307.786 130.333 li
303.11 130.333 li
303.11 134.147 li
299.296 134.147 li
299.296 138.823 li
303.11 138.823 li
303.11 142.637 li
307.786 142.637 li
307.786 138.823 li
311.6 138.823 li
311.6 134.147 li
cp
.367102 0 .958465 0 cmyk
f
128.588 213.976 mo
122.816 213.976 118.121 218.672 118.121 224.443 cv
118.121 230.214 122.816 234.91 128.588 234.91 cv
134.359 234.91 139.054 230.214 139.054 224.443 cv
139.054 218.672 134.359 213.976 128.588 213.976 cv
cp
128.588 236.21 mo
122.099 236.21 116.821 230.931 116.821 224.443 cv
116.821 217.955 122.099 212.676 128.588 212.676 cv
135.076 212.676 140.354 217.955 140.354 224.443 cv
140.354 230.931 135.076 236.21 128.588 236.21 cv
cp
0 .757687 .962097 0 cmyk
f
124.987 218.598 mo
135.11 224.443 li
124.987 230.288 li
124.987 218.598 li
cp
0 .226871 .9028 0 cmyk
f
178.808 127.163 mo
170.178 127.163 163.156 134.185 163.156 142.815 cv
163.156 142.831 li
163.124 144.228 163.475 148.144 165.031 152.967 cv
166.173 156.506 167.776 160.018 169.795 163.407 cv
172.216 167.47 175.247 171.367 178.808 174.997 cv
182.381 171.355 185.42 167.445 187.845 163.367 cv
189.865 159.97 191.467 156.45 192.606 152.904 cv
194.537 146.89 194.461 142.871 194.46 142.831 cv
194.46 142.815 li
194.46 134.185 187.439 127.163 178.808 127.163 cv
cp
178.808 176.839 mo
178.349 176.38 li
174.5 172.531 171.238 168.376 168.654 164.031 cv
166.584 160.551 164.942 156.94 163.773 153.301 cv
161.802 147.161 161.851 143.079 161.856 142.808 cv
161.86 133.464 169.463 125.863 178.808 125.863 cv
188.153 125.863 195.756 133.464 195.76 142.808 cv
195.766 143.079 195.815 147.161 193.843 153.301 cv
192.675 156.94 191.032 160.551 188.962 164.031 cv
186.379 168.376 183.117 172.531 179.268 176.38 cv
178.808 176.839 li
cp
0 .757687 .962097 0 cmyk
f
187.336 143.806 mo
187.336 148.516 183.518 152.335 178.808 152.335 cv
174.098 152.335 170.28 148.516 170.28 143.806 cv
170.28 139.096 174.098 135.278 178.808 135.278 cv
183.518 135.278 187.336 139.096 187.336 143.806 cv
cp
0 .226871 .9028 0 cmyk
f
178.903 146.368 mo
174.6 142.282 li
175.495 141.339 li
178.713 144.395 li
186.807 133.046 li
187.866 133.801 li
178.903 146.368 li
cp
0 .757687 .962097 0 cmyk
f
201.46 169.297 mo
200.743 169.297 199.827 169.866 199.365 170.343 cv
198.903 169.866 197.987 169.297 197.27 169.297 cv
195.865 169.297 194.996 170.436 194.996 171.841 cv
194.996 173.846 198.384 176.077 199.365 176.584 cv
200.333 176.088 203.734 173.846 203.734 171.841 cv
203.734 170.436 202.865 169.297 201.46 169.297 cv
cp
.702144 .15375 0 0 cmyk
f
346.384 72.5261 mo
345.668 72.5261 344.752 73.0955 344.289 73.5725 cv
343.827 73.0955 342.911 72.5261 342.194 72.5261 cv
340.79 72.5261 339.92 73.665 339.92 75.0699 cv
339.92 77.0748 343.308 79.306 344.289 79.8138 cv
345.258 79.3173 348.659 77.0748 348.659 75.0699 cv
348.659 73.665 347.789 72.5261 346.384 72.5261 cv
cp
f
108.758 210.552 mo
108.041 210.552 107.125 211.122 106.663 211.599 cv
106.2 211.122 105.285 210.552 104.568 210.552 cv
103.163 210.552 102.294 211.691 102.294 213.096 cv
102.294 215.101 105.681 217.332 106.663 217.84 cv
107.631 217.344 111.032 215.101 111.032 213.096 cv
111.032 211.691 110.163 210.552 108.758 210.552 cv
cp
f
86.5863 88.1629 mo
85.8695 88.1629 84.9537 88.7323 84.4914 89.2093 cv
84.029 88.7323 83.1132 88.1629 82.3964 88.1629 cv
80.9916 88.1629 80.1221 89.3018 80.1221 90.7067 cv
80.1221 92.7116 83.51 94.9428 84.4914 95.4506 cv
85.4597 94.9541 88.8607 92.7116 88.8607 90.7067 cv
88.8607 89.3018 87.9912 88.1629 86.5863 88.1629 cv
cp
f
99.434 141.631 mo
98.5148 140.711 li
105.775 133.452 li
106.694 134.371 li
99.434 141.631 li
cp
.367102 0 .958465 0 cmyk
f
105.775 141.631 mo
98.5148 134.371 li
99.434 133.452 li
106.694 140.711 li
105.775 141.631 li
cp
f
294.593 247.025 mo
293.674 246.105 li
300.933 238.846 li
301.852 239.765 li
294.593 247.025 li
cp
0 0 0 0 cmyk
f
300.933 247.025 mo
293.674 239.765 li
294.593 238.846 li
301.852 246.105 li
300.933 247.025 li
cp
f
198.636 254.373 mo
198.636 259.968 194.101 264.503 188.506 264.503 cv
182.912 264.503 178.377 259.968 178.377 254.373 cv
178.377 248.779 182.912 244.243 188.506 244.243 cv
194.101 244.243 198.636 248.779 198.636 254.373 cv
cp
.367102 0 .958465 0 cmyk
f
198.873 278.043 mo
178.14 278.043 li
178.14 274.99 li
178.14 269.264 182.781 264.623 188.506 264.623 cv
188.506 264.623 li
194.232 264.623 198.873 269.264 198.873 274.99 cv
198.873 278.043 li
cp
f
144.528 255.269 mo
164.236 255.269 li
164.236 242.081 li
144.528 242.081 li
144.528 255.269 li
cp
164.886 256.569 mo
143.878 256.569 li
143.519 256.569 143.228 256.278 143.228 255.919 cv
143.228 241.431 li
143.228 241.072 143.519 240.781 143.878 240.781 cv
164.886 240.781 li
165.245 240.781 165.536 241.072 165.536 241.431 cv
165.536 255.919 li
165.536 256.278 165.245 256.569 164.886 256.569 cv
cp
0 .215244 .909819 0 cmyk
f
145.576 242.081 mo
154.382 249.975 li
163.187 242.081 li
145.576 242.081 li
cp
154.382 251.498 mo
154.227 251.498 154.071 251.443 153.948 251.332 cv
143.444 241.915 li
143.243 241.735 143.174 241.45 143.271 241.199 cv
143.367 240.947 143.608 240.781 143.878 240.781 cv
164.886 240.781 li
165.155 240.781 165.397 240.947 165.493 241.199 cv
165.589 241.45 165.52 241.735 165.32 241.915 cv
154.816 251.332 li
154.692 251.443 154.537 251.498 154.382 251.498 cv
cp
f
207.863 121.669 mo
209.36 126.278 li
209.435 126.508 209.65 126.664 209.892 126.664 cv
214.738 126.664 li
215.279 126.664 215.504 127.357 215.066 127.675 cv
211.146 130.524 li
210.95 130.666 210.868 130.918 210.943 131.148 cv
212.44 135.757 li
212.608 136.272 212.018 136.7 211.58 136.382 cv
207.66 133.534 li
207.464 133.391 207.199 133.391 207.003 133.534 cv
203.082 136.382 li
202.644 136.7 202.055 136.272 202.222 135.757 cv
203.72 131.148 li
203.795 130.918 203.713 130.666 203.517 130.524 cv
199.596 127.675 li
199.158 127.357 199.383 126.664 199.925 126.664 cv
204.771 126.664 li
205.013 126.664 205.228 126.508 205.302 126.278 cv
206.8 121.669 li
206.967 121.154 207.696 121.154 207.863 121.669 cv
cp
.2009 0 .0258183 0 cmyk
f
125.481 109.763 mo
126.979 114.372 li
127.053 114.602 127.268 114.758 127.51 114.758 cv
132.356 114.758 li
132.897 114.758 133.123 115.451 132.685 115.769 cv
128.764 118.618 li
128.568 118.76 128.486 119.012 128.561 119.243 cv
130.059 123.851 li
130.226 124.366 129.637 124.794 129.199 124.476 cv
125.278 121.628 li
125.082 121.485 124.817 121.485 124.621 121.628 cv
120.701 124.476 li
120.263 124.794 119.673 124.366 119.841 123.851 cv
121.338 119.243 li
121.413 119.012 121.331 118.76 121.135 118.618 cv
117.215 115.769 li
116.777 115.451 117.002 114.758 117.543 114.758 cv
122.389 114.758 li
122.631 114.758 122.846 114.602 122.921 114.372 cv
124.418 109.763 li
124.585 109.248 125.314 109.248 125.481 109.763 cv
cp
0 .226871 .9028 0 cmyk
f
263.77 58.2572 mo
265.267 62.866 li
265.342 63.0963 265.557 63.2522 265.799 63.2522 cv
270.645 63.2522 li
271.186 63.2522 271.411 63.9449 270.973 64.2631 cv
267.053 67.1115 li
266.857 67.2539 266.775 67.5061 266.85 67.7364 cv
268.347 72.3452 li
268.514 72.8601 267.925 73.2882 267.487 72.97 cv
263.567 70.1216 li
263.371 69.9793 263.106 69.9793 262.91 70.1216 cv
258.989 72.97 li
258.551 73.2882 257.962 72.8601 258.129 72.3452 cv
259.627 67.7364 li
259.702 67.5061 259.62 67.2539 259.424 67.1115 cv
255.503 64.2631 li
255.065 63.9449 255.29 63.2522 255.832 63.2522 cv
260.678 63.2522 li
260.92 63.2522 261.134 63.0963 261.209 62.866 cv
262.707 58.2572 li
262.874 57.7423 263.602 57.7423 263.77 58.2572 cv
cp
0 .215244 .909819 0 cmyk
f
100.05 90.1457 mo
120.381 90.1457 li
120.381 70.8381 li
120.381 69.8896 119.609 69.118 118.661 69.118 cv
101.77 69.118 li
100.821 69.118 100.05 69.8896 100.05 70.8381 cv
100.05 90.1457 li
cp
121.681 91.4457 mo
98.7498 91.4457 li
98.7498 70.8381 li
98.7498 69.1728 100.105 67.818 101.77 67.818 cv
118.661 67.818 li
120.326 67.818 121.681 69.1728 121.681 70.8381 cv
121.681 91.4457 li
cp
f
121.031 74.4899 mo
99.3998 74.4899 li
99.3998 73.1899 li
121.031 73.1899 li
121.031 74.4899 li
cp
f
102.926 68.319 mo
101.626 68.319 li
101.626 65.1394 li
102.926 65.1394 li
102.926 68.319 li
cp
f
118.927 68.319 mo
117.627 68.319 li
117.627 65.1394 li
118.927 65.1394 li
118.927 68.319 li
cp
f
121.031 79.7443 mo
99.3998 79.7443 li
99.3998 78.4443 li
121.031 78.4443 li
121.031 79.7443 li
cp
f
121.031 85.4548 mo
99.3998 85.4548 li
99.3998 84.1548 li
121.031 84.1548 li
121.031 85.4548 li
cp
f
107.086 90.7957 mo
105.786 90.7957 li
105.786 73.8399 li
107.086 73.8399 li
107.086 90.7957 li
cp
f
114.634 90.7957 mo
113.334 90.7957 li
113.334 73.8399 li
114.634 73.8399 li
114.634 90.7957 li
cp
f
107.086 84.1548 mo
113.334 84.1548 li
113.334 79.7443 li
107.086 79.7443 li
107.086 84.1548 li
cp
114.634 85.4548 mo
105.786 85.4548 li
105.786 78.4443 li
114.634 78.4443 li
114.634 85.4548 li
cp
f
166.499 114.167 mo
167.618 119.159 li
172.098 118.155 li
170.979 113.163 li
166.499 114.167 li
cp
0 .757687 .962097 0 cmyk
f
166.261 119.464 mo
165.142 114.471 li
153.68 117.041 li
154.799 122.033 li
166.261 119.464 li
cp
f
152.403 117.703 mo
147.983 120.94 li
153.362 121.979 li
152.403 117.703 li
cp
f
129.057 60.2412 mo
124.507 55.691 li
120.278 59.9205 li
119.358 59.0012 li
124.507 53.8525 li
129.057 58.4027 li
134.216 53.244 li
135.135 54.1633 li
129.057 60.2412 li
cp
0 0 0 0 cmyk
f
304.643 120.755 mo
297.876 118.069 li
300.249 112.088 li
293.468 109.397 li
293.948 108.188 li
301.937 111.359 li
299.563 117.34 li
305.123 119.546 li
304.643 120.755 li
cp
f
376.345 137.02 mo
371.094 130.215 li
376.188 126.284 li
372.534 121.549 li
373.563 120.754 li
378.012 126.519 li
372.917 130.45 li
377.374 136.226 li
376.345 137.02 li
cp
f
70.8463 152.851 mo
70.4243 144.266 li
76.8514 143.95 li
76.5578 137.976 li
77.8562 137.912 li
78.2137 145.185 li
71.7866 145.501 li
72.1447 152.787 li
70.8463 152.851 li
cp
0 .215244 .909819 0 cmyk
f
252.656 283.083 mo
251.529 282.435 li
255.811 274.983 li
261.391 278.189 li
264.371 273.002 li
265.498 273.65 li
261.87 279.963 li
256.291 276.757 li
252.656 283.083 li
cp
0 0 0 0 cmyk
f
300.37 56.3247 mo
294.465 56.3247 li
294.106 56.3247 293.815 56.0337 293.815 55.6747 cv
293.815 55.3157 294.106 55.0247 294.465 55.0247 cv
300.37 55.0247 li
300.729 55.0247 301.02 55.3157 301.02 55.6747 cv
301.02 56.0337 300.729 56.3247 300.37 56.3247 cv
cp
0 .757687 .962097 0 cmyk
f
304.402 52.3826 mo
298.497 52.3826 li
298.138 52.3826 297.847 52.0916 297.847 51.7326 cv
297.847 51.3736 298.138 51.0826 298.497 51.0826 cv
304.402 51.0826 li
304.761 51.0826 305.052 51.3736 305.052 51.7326 cv
305.052 52.0916 304.761 52.3826 304.402 52.3826 cv
cp
f
163.42 178.541 mo
157.515 178.541 li
157.515 177.241 li
163.42 177.241 li
163.42 178.541 li
cp
.367102 0 .958465 0 cmyk
f
167.452 174.599 mo
161.547 174.599 li
161.547 173.299 li
167.452 173.299 li
167.452 174.599 li
cp
f
339.693 184.056 mo
333.788 184.056 li
333.429 184.056 333.138 183.765 333.138 183.406 cv
333.138 183.047 333.429 182.756 333.788 182.756 cv
339.693 182.756 li
340.052 182.756 340.343 183.047 340.343 183.406 cv
340.343 183.765 340.052 184.056 339.693 184.056 cv
cp
0 .757687 .962097 0 cmyk
f
343.725 180.114 mo
337.82 180.114 li
337.461 180.114 337.17 179.823 337.17 179.464 cv
337.17 179.105 337.461 178.814 337.82 178.814 cv
343.725 178.814 li
344.084 178.814 344.375 179.105 344.375 179.464 cv
344.375 179.823 344.084 180.114 343.725 180.114 cv
cp
f
134.134 382.402 mo
134.134 369.965 li
135.002 369.965 li
135.002 382.402 li
134.134 382.402 li
cp
0 0 0 0 cmyk
f
143.679 382.402 mo
142.836 382.402 li
142.836 369.166 li
143.679 369.166 li
143.679 382.402 li
cp
f
147.617 382.402 mo
146.775 382.402 li
146.775 373.155 li
147.617 373.155 li
147.617 382.402 li
cp
146.656 370.586 mo
146.656 370.042 146.834 369.77 147.192 369.77 cv
147.367 369.77 147.505 369.841 147.604 369.982 cv
147.703 370.124 147.753 370.326 147.753 370.586 cv
147.753 370.841 147.703 371.043 147.604 371.19 cv
147.505 371.338 147.367 371.411 147.192 371.411 cv
146.834 371.411 146.656 371.136 146.656 370.586 cv
cp
f
151.538 378.344 mo
156.26 373.155 li
157.28 373.155 li
153.64 377.102 li
157.595 382.402 li
156.583 382.402 li
153.07 377.732 li
151.555 379.11 li
151.555 382.402 li
150.713 382.402 li
150.713 369.166 li
151.555 369.166 li
151.555 375.801 li
151.496 378.344 li
151.538 378.344 li
cp
f
162.631 373.725 mo
161.74 373.725 161.026 374.019 160.487 374.605 cv
159.948 375.192 159.634 376.039 159.543 377.145 cv
165.259 377.145 li
165.259 376.073 165.027 375.235 164.562 374.631 cv
164.097 374.027 163.453 373.725 162.631 373.725 cv
cp
162.878 382.572 mo
161.534 382.572 160.486 382.158 159.734 381.33 cv
158.983 380.502 158.607 379.342 158.607 377.851 cv
158.607 376.376 158.97 375.195 159.696 374.308 cv
160.422 373.42 161.4 372.977 162.631 372.977 cv
163.72 372.977 164.579 373.357 165.208 374.116 cv
165.838 374.876 166.153 375.909 166.153 377.213 cv
166.153 377.893 li
159.492 377.893 li
159.503 379.164 159.8 380.133 160.381 380.802 cv
160.962 381.472 161.794 381.806 162.878 381.806 cv
163.405 381.806 163.869 381.769 164.268 381.696 cv
164.668 381.622 165.174 381.463 165.787 381.219 cv
165.787 381.985 li
165.265 382.212 164.783 382.366 164.341 382.448 cv
163.898 382.531 163.411 382.572 162.878 382.572 cv
cp
f
175.671 381.823 mo
176.204 381.823 176.669 381.778 177.066 381.687 cv
177.066 382.368 li
176.658 382.504 176.187 382.572 175.654 382.572 cv
174.838 382.572 174.235 382.354 173.847 381.917 cv
173.458 381.48 173.264 380.794 173.264 379.858 cv
173.264 373.887 li
171.894 373.887 li
171.894 373.393 li
173.264 373.011 li
173.689 370.918 li
174.123 370.918 li
174.123 373.155 li
176.837 373.155 li
176.837 373.887 li
174.123 373.887 li
174.123 379.739 li
174.123 380.448 174.248 380.973 174.497 381.313 cv
174.747 381.653 175.138 381.823 175.671 381.823 cv
cp
f
179.414 377.766 mo
179.414 379.036 179.693 380.027 180.252 380.739 cv
180.81 381.45 181.6 381.806 182.621 381.806 cv
183.642 381.806 184.431 381.45 184.99 380.739 cv
185.548 380.027 185.828 379.036 185.828 377.766 cv
185.828 376.49 185.546 375.5 184.981 374.797 cv
184.417 374.094 183.625 373.742 182.604 373.742 cv
181.583 373.742 180.796 374.092 180.243 374.793 cv
179.69 375.493 179.414 376.484 179.414 377.766 cv
cp
186.713 377.766 mo
186.713 379.274 186.347 380.452 185.615 381.3 cv
184.884 382.148 183.874 382.572 182.587 382.572 cv
181.776 382.572 181.061 382.376 180.443 381.985 cv
179.825 381.594 179.352 381.032 179.023 380.301 cv
178.694 379.569 178.529 378.724 178.529 377.766 cv
178.529 376.257 178.895 375.082 179.627 374.24 cv
180.358 373.398 181.362 372.977 182.638 372.977 cv
183.908 372.977 184.905 373.403 185.628 374.257 cv
186.351 375.11 186.713 376.28 186.713 377.766 cv
cp
f
197.49 382.572 mo
196.169 382.572 195.134 382.155 194.385 381.321 cv
193.637 380.488 193.262 379.325 193.262 377.834 cv
193.262 376.303 193.651 375.11 194.428 374.257 cv
195.205 373.403 196.268 372.977 197.618 372.977 cv
198.417 372.977 199.183 373.116 199.915 373.393 cv
199.685 374.142 li
198.885 373.875 198.191 373.742 197.601 373.742 cv
196.467 373.742 195.607 374.092 195.023 374.793 cv
194.439 375.493 194.147 376.501 194.147 377.817 cv
194.147 379.064 194.439 380.041 195.023 380.747 cv
195.607 381.453 196.424 381.806 197.473 381.806 cv
198.312 381.806 199.092 381.656 199.812 381.355 cv
199.812 382.138 li
199.223 382.427 198.448 382.572 197.49 382.572 cv
cp
f
202.424 377.766 mo
202.424 379.036 202.703 380.027 203.262 380.739 cv
203.82 381.45 204.61 381.806 205.631 381.806 cv
206.652 381.806 207.441 381.45 208 380.739 cv
208.558 380.027 208.838 379.036 208.838 377.766 cv
208.838 376.49 208.556 375.5 207.991 374.797 cv
207.427 374.094 206.635 373.742 205.614 373.742 cv
204.593 373.742 203.806 374.092 203.253 374.793 cv
202.7 375.493 202.424 376.484 202.424 377.766 cv
cp
209.722 377.766 mo
209.722 379.274 209.357 380.452 208.625 381.3 cv
207.894 382.148 206.884 382.572 205.597 382.572 cv
204.786 382.572 204.071 382.376 203.453 381.985 cv
202.835 381.594 202.361 381.032 202.033 380.301 cv
201.704 379.569 201.539 378.724 201.539 377.766 cv
201.539 376.257 201.905 375.082 202.637 374.24 cv
203.368 373.398 204.372 372.977 205.648 372.977 cv
206.918 372.977 207.915 373.403 208.638 374.257 cv
209.361 375.11 209.722 376.28 209.722 377.766 cv
cp
f
223.835 382.402 mo
223.835 376.337 li
223.835 375.435 223.659 374.777 223.307 374.363 cv
222.956 373.949 222.417 373.742 221.691 373.742 cv
220.744 373.742 220.044 374.003 219.59 374.525 cv
219.136 375.046 218.909 375.866 218.909 376.983 cv
218.909 382.402 li
218.05 382.402 li
218.05 376.081 li
218.05 374.522 217.336 373.742 215.907 373.742 cv
214.937 373.742 214.231 374.024 213.789 374.588 cv
213.346 375.153 213.125 376.056 213.125 377.298 cv
213.125 382.402 li
212.283 382.402 li
212.283 373.155 li
212.98 373.155 li
213.159 374.423 li
213.21 374.423 li
213.465 373.963 213.828 373.608 214.299 373.355 cv
214.77 373.103 215.288 372.977 215.856 372.977 cv
217.313 372.977 218.249 373.524 218.663 374.618 cv
218.697 374.618 li
218.997 374.091 219.401 373.685 219.909 373.402 cv
220.416 373.118 220.993 372.977 221.64 372.977 cv
222.649 372.977 223.406 373.246 223.911 373.785 cv
224.416 374.323 224.668 375.18 224.668 376.354 cv
224.668 382.402 li
223.835 382.402 li
cp
f
239.214 382.402 mo
239.214 376.337 li
239.214 375.435 239.038 374.777 238.687 374.363 cv
238.335 373.949 237.796 373.742 237.071 373.742 cv
236.124 373.742 235.423 374.003 234.97 374.525 cv
234.516 375.046 234.289 375.866 234.289 376.983 cv
234.289 382.402 li
233.43 382.402 li
233.43 376.081 li
233.43 374.522 232.715 373.742 231.286 373.742 cv
230.316 373.742 229.611 374.024 229.168 374.588 cv
228.726 375.153 228.505 376.056 228.505 377.298 cv
228.505 382.402 li
227.663 382.402 li
227.663 373.155 li
228.36 373.155 li
228.539 374.423 li
228.59 374.423 li
228.845 373.963 229.208 373.608 229.679 373.355 cv
230.149 373.103 230.668 372.977 231.235 372.977 cv
232.693 372.977 233.628 373.524 234.042 374.618 cv
234.076 374.618 li
234.377 374.091 234.781 373.685 235.289 373.402 cv
235.796 373.118 236.373 372.977 237.02 372.977 cv
238.029 372.977 238.786 373.246 239.291 373.785 cv
239.796 374.323 240.048 375.18 240.048 376.354 cv
240.048 382.402 li
239.214 382.402 li
cp
f
243.774 373.155 mo
243.774 379.144 li
243.774 380.074 243.969 380.75 244.361 381.172 cv
244.752 381.595 245.359 381.806 246.181 381.806 cv
247.281 381.806 248.091 381.528 248.61 380.973 cv
249.129 380.417 249.388 379.512 249.388 378.259 cv
249.388 373.155 li
250.222 373.155 li
250.222 382.402 li
249.507 382.402 li
249.354 381.126 li
249.303 381.126 li
248.702 382.09 247.633 382.572 246.096 382.572 cv
243.992 382.572 242.94 381.446 242.94 379.195 cv
242.94 373.155 li
243.774 373.155 li
cp
f
259.766 382.402 mo
259.766 376.405 li
259.766 375.475 259.57 374.798 259.179 374.376 cv
258.788 373.953 258.181 373.742 257.358 373.742 cv
256.253 373.742 255.443 374.021 254.93 374.58 cv
254.417 375.139 254.16 376.045 254.16 377.298 cv
254.16 382.402 li
253.318 382.402 li
253.318 373.155 li
254.032 373.155 li
254.194 374.423 li
254.245 374.423 li
254.846 373.459 255.915 372.977 257.452 372.977 cv
259.55 372.977 260.599 374.102 260.599 376.354 cv
260.599 382.402 li
259.766 382.402 li
cp
f
264.436 382.402 mo
263.594 382.402 li
263.594 373.155 li
264.436 373.155 li
264.436 382.402 li
cp
263.475 370.586 mo
263.475 370.042 263.653 369.77 264.01 369.77 cv
264.186 369.77 264.324 369.841 264.423 369.982 cv
264.522 370.124 264.572 370.326 264.572 370.586 cv
264.572 370.841 264.522 371.043 264.423 371.19 cv
264.324 371.338 264.186 371.411 264.01 371.411 cv
263.653 371.411 263.475 371.136 263.475 370.586 cv
cp
f
271.224 382.572 mo
269.903 382.572 268.868 382.155 268.119 381.321 cv
267.371 380.488 266.996 379.325 266.996 377.834 cv
266.996 376.303 267.385 375.11 268.162 374.257 cv
268.938 373.403 270.002 372.977 271.352 372.977 cv
272.151 372.977 272.917 373.116 273.648 373.393 cv
273.419 374.142 li
272.619 373.875 271.924 373.742 271.335 373.742 cv
270.2 373.742 269.341 374.092 268.757 374.793 cv
268.173 375.493 267.881 376.501 267.881 377.817 cv
267.881 379.064 268.173 380.041 268.757 380.747 cv
269.341 381.453 270.158 381.806 271.207 381.806 cv
272.046 381.806 272.826 381.656 273.546 381.355 cv
273.546 382.138 li
272.956 382.427 272.182 382.572 271.224 382.572 cv
cp
f
278.021 381.806 mo
279.007 381.806 279.786 381.524 280.356 380.96 cv
280.925 380.396 281.21 379.612 281.21 378.608 cv
281.21 377.698 li
279.594 377.766 li
278.296 377.828 277.37 378.031 276.817 378.374 cv
276.264 378.717 275.987 379.251 275.987 379.977 cv
275.987 380.556 276.165 381.005 276.519 381.326 cv
276.874 381.646 277.374 381.806 278.021 381.806 cv
cp
281.423 382.402 mo
281.21 380.939 li
281.142 380.939 li
280.677 381.534 280.2 381.955 279.709 382.202 cv
279.219 382.448 278.639 382.572 277.97 382.572 cv
277.062 382.572 276.356 382.339 275.851 381.874 cv
275.347 381.409 275.094 380.766 275.094 379.943 cv
275.094 379.042 275.47 378.341 276.221 377.842 cv
276.973 377.343 278.06 377.08 279.484 377.051 cv
281.245 377 li
281.245 376.388 li
281.245 375.509 281.066 374.845 280.709 374.397 cv
280.351 373.949 279.776 373.725 278.982 373.725 cv
278.125 373.725 277.238 373.963 276.319 374.44 cv
276.005 373.708 li
277.02 373.232 278.023 372.994 279.016 372.994 cv
280.031 372.994 280.789 373.257 281.291 373.785 cv
281.793 374.312 282.044 375.134 282.044 376.251 cv
282.044 382.402 li
281.423 382.402 li
cp
f
287.48 381.823 mo
288.013 381.823 288.478 381.778 288.875 381.687 cv
288.875 382.368 li
288.466 382.504 287.996 382.572 287.463 382.572 cv
286.646 382.572 286.043 382.354 285.655 381.917 cv
285.267 381.48 285.072 380.794 285.072 379.858 cv
285.072 373.887 li
283.703 373.887 li
283.703 373.393 li
285.072 373.011 li
285.498 370.918 li
285.932 370.918 li
285.932 373.155 li
288.645 373.155 li
288.645 373.887 li
285.932 373.887 li
285.932 379.739 li
285.932 380.448 286.056 380.973 286.306 381.313 cv
286.555 381.653 286.947 381.823 287.48 381.823 cv
cp
f
294.362 373.725 mo
293.471 373.725 292.757 374.019 292.218 374.605 cv
291.679 375.192 291.364 376.039 291.274 377.145 cv
296.99 377.145 li
296.99 376.073 296.757 375.235 296.292 374.631 cv
295.827 374.027 295.184 373.725 294.362 373.725 cv
cp
294.608 382.572 mo
293.264 382.572 292.216 382.158 291.465 381.33 cv
290.714 380.502 290.338 379.342 290.338 377.851 cv
290.338 376.376 290.701 375.195 291.427 374.308 cv
292.153 373.42 293.131 372.977 294.362 372.977 cv
295.45 372.977 296.309 373.357 296.939 374.116 cv
297.568 374.876 297.883 375.909 297.883 377.213 cv
297.883 377.893 li
291.223 377.893 li
291.234 379.164 291.53 380.133 292.112 380.802 cv
292.693 381.472 293.525 381.806 294.608 381.806 cv
295.136 381.806 295.599 381.769 295.999 381.696 cv
296.399 381.622 296.905 381.463 297.517 381.219 cv
297.517 381.985 li
296.996 382.212 296.514 382.366 296.071 382.448 cv
295.629 382.531 295.141 382.572 294.608 382.572 cv
cp
f
305.803 382.402 mo
304.96 382.402 li
304.96 373.155 li
305.803 373.155 li
305.803 382.402 li
cp
304.841 370.586 mo
304.841 370.042 305.02 369.77 305.377 369.77 cv
305.553 369.77 305.691 369.841 305.79 369.982 cv
305.889 370.124 305.939 370.326 305.939 370.586 cv
305.939 370.841 305.889 371.043 305.79 371.19 cv
305.691 371.338 305.553 371.411 305.377 371.411 cv
305.02 371.411 304.841 371.136 304.841 370.586 cv
cp
f
315.347 382.402 mo
315.347 376.405 li
315.347 375.475 315.151 374.798 314.76 374.376 cv
314.369 373.953 313.762 373.742 312.94 373.742 cv
311.834 373.742 311.024 374.021 310.511 374.58 cv
309.998 375.139 309.741 376.045 309.741 377.298 cv
309.741 382.402 li
308.899 382.402 li
308.899 373.155 li
309.613 373.155 li
309.775 374.423 li
309.826 374.423 li
310.427 373.459 311.496 372.977 313.033 372.977 cv
315.131 372.977 316.18 374.102 316.18 376.354 cv
316.18 382.402 li
315.347 382.402 li
cp
f
151.857 402.948 mo
151.857 404.071 151.453 404.956 150.645 405.602 cv
149.837 406.249 148.713 406.572 147.273 406.572 cv
145.946 406.572 144.772 406.322 143.751 405.823 cv
143.751 403.373 li
144.59 403.748 145.3 404.011 145.882 404.164 cv
146.463 404.318 146.995 404.394 147.477 404.394 cv
148.055 404.394 148.499 404.284 148.808 404.062 cv
149.117 403.841 149.271 403.512 149.271 403.076 cv
149.271 402.832 149.203 402.615 149.067 402.425 cv
148.931 402.235 148.731 402.052 148.468 401.876 cv
148.204 401.701 147.667 401.42 146.856 401.034 cv
146.096 400.677 145.526 400.334 145.146 400.005 cv
144.766 399.676 144.462 399.293 144.236 398.856 cv
144.009 398.42 143.895 397.909 143.895 397.325 cv
143.895 396.225 144.268 395.36 145.014 394.731 cv
145.76 394.101 146.79 393.787 148.106 393.787 cv
148.753 393.787 149.369 393.863 149.956 394.016 cv
150.543 394.169 151.157 394.385 151.798 394.663 cv
150.947 396.713 li
150.284 396.441 149.735 396.251 149.301 396.143 cv
148.867 396.035 148.441 395.981 148.021 395.981 cv
147.522 395.981 147.139 396.098 146.873 396.33 cv
146.606 396.563 146.473 396.866 146.473 397.24 cv
146.473 397.473 146.527 397.675 146.635 397.848 cv
146.742 398.021 146.914 398.189 147.149 398.35 cv
147.384 398.512 147.942 398.803 148.821 399.222 cv
149.983 399.778 150.78 400.335 151.211 400.894 cv
151.642 401.452 151.857 402.137 151.857 402.948 cv
cp
0 .757687 .962097 0 cmyk
f
156.323 400.166 mo
156.323 401.556 156.587 402.602 157.114 403.305 cv
157.642 404.009 158.43 404.36 159.479 404.36 cv
161.583 404.36 162.635 402.962 162.635 400.166 cv
162.635 397.365 161.589 395.964 159.496 395.964 cv
158.447 395.964 157.656 396.317 157.123 397.023 cv
156.59 397.729 156.323 398.777 156.323 400.166 cv
cp
165.4 400.166 mo
165.4 402.225 164.889 403.807 163.869 404.913 cv
162.848 406.019 161.385 406.572 159.479 406.572 cv
157.574 406.572 156.111 406.019 155.09 404.913 cv
154.069 403.807 153.559 402.219 153.559 400.149 cv
153.559 398.08 154.07 396.499 155.094 395.407 cv
156.118 394.316 157.585 393.77 159.496 393.77 cv
161.407 393.77 162.869 394.32 163.881 395.42 cv
164.894 396.52 165.4 398.102 165.4 400.166 cv
cp
f
173.26 395.981 mo
172.267 395.981 171.499 396.354 170.954 397.1 cv
170.41 397.846 170.138 398.885 170.138 400.217 cv
170.138 402.991 171.178 404.377 173.26 404.377 cv
174.133 404.377 175.191 404.159 176.433 403.722 cv
176.433 405.934 li
175.412 406.359 174.272 406.572 173.013 406.572 cv
171.204 406.572 169.82 406.023 168.862 404.926 cv
167.903 403.828 167.424 402.253 167.424 400.201 cv
167.424 398.908 167.659 397.775 168.13 396.802 cv
168.601 395.83 169.277 395.084 170.159 394.565 cv
171.041 394.046 172.074 393.787 173.26 393.787 cv
174.468 393.787 175.681 394.079 176.9 394.663 cv
176.05 396.806 li
175.585 396.585 175.117 396.392 174.646 396.228 cv
174.175 396.064 173.713 395.981 173.26 395.981 cv
cp
f
179.078 406.402 mo
179.078 393.965 li
181.715 393.965 li
181.715 406.402 li
179.078 406.402 li
cp
f
190.927 401.23 mo
190.094 398.547 189.625 397.03 189.52 396.679 cv
189.415 396.327 189.34 396.049 189.294 395.845 cv
189.107 396.571 188.571 398.366 187.687 401.23 cv
190.927 401.23 li
cp
192.459 406.402 mo
191.557 403.441 li
187.023 403.441 li
186.121 406.402 li
183.28 406.402 li
187.67 393.914 li
190.893 393.914 li
195.3 406.402 li
192.459 406.402 li
cp
f
196.865 406.402 mo
196.865 393.965 li
199.502 393.965 li
199.502 404.224 li
204.546 404.224 li
204.546 406.402 li
196.865 406.402 li
cp
f
222.265 406.402 mo
218.914 406.402 li
213.504 396.994 li
213.427 396.994 li
213.535 398.655 213.589 399.84 213.589 400.549 cv
213.589 406.402 li
211.232 406.402 li
211.232 393.965 li
214.558 393.965 li
219.96 403.28 li
220.019 403.28 li
219.934 401.664 219.892 400.521 219.892 399.852 cv
219.892 393.965 li
222.265 393.965 li
222.265 406.402 li
cp
f
232.558 406.402 mo
225.396 406.402 li
225.396 393.965 li
232.558 393.965 li
232.558 396.126 li
228.033 396.126 li
228.033 398.856 li
232.243 398.856 li
232.243 401.017 li
228.033 401.017 li
228.033 404.224 li
232.558 404.224 li
232.558 406.402 li
cp
f
239.95 406.402 mo
237.313 406.402 li
237.313 396.16 li
233.936 396.16 li
233.936 393.965 li
243.327 393.965 li
243.327 396.16 li
239.95 396.16 li
239.95 406.402 li
cp
f
257.354 406.402 mo
254.351 406.402 li
252.667 399.869 li
252.605 399.636 252.498 399.156 252.348 398.427 cv
252.198 397.698 252.111 397.209 252.089 396.959 cv
252.055 397.266 251.97 397.758 251.834 398.435 cv
251.697 399.113 251.592 399.596 251.519 399.886 cv
249.843 406.402 li
246.849 406.402 li
243.676 393.965 li
246.27 393.965 li
247.861 400.753 li
248.139 402.007 248.34 403.093 248.465 404.011 cv
248.499 403.688 248.577 403.188 248.699 402.51 cv
248.821 401.832 248.936 401.306 249.043 400.932 cv
250.855 393.965 li
253.348 393.965 li
255.16 400.932 li
255.239 401.244 255.338 401.72 255.457 402.361 cv
255.576 403.002 255.667 403.552 255.729 404.011 cv
255.786 403.569 255.877 403.018 256.002 402.357 cv
256.126 401.696 256.24 401.162 256.342 400.753 cv
257.924 393.965 li
260.519 393.965 li
257.354 406.402 li
cp
f
264.295 400.166 mo
264.295 401.556 264.559 402.602 265.087 403.305 cv
265.614 404.009 266.402 404.36 267.451 404.36 cv
269.555 404.36 270.607 402.962 270.607 400.166 cv
270.607 397.365 269.561 395.964 267.468 395.964 cv
266.419 395.964 265.628 396.317 265.095 397.023 cv
264.562 397.729 264.295 398.777 264.295 400.166 cv
cp
273.372 400.166 mo
273.372 402.225 272.861 403.807 271.841 404.913 cv
270.82 406.019 269.357 406.572 267.451 406.572 cv
265.546 406.572 264.083 406.019 263.062 404.913 cv
262.041 403.807 261.531 402.219 261.531 400.149 cv
261.531 398.08 262.043 396.499 263.066 395.407 cv
264.09 394.316 265.557 393.77 267.468 393.77 cv
269.379 393.77 270.841 394.32 271.853 395.42 cv
272.866 396.52 273.372 398.102 273.372 400.166 cv
cp
f
278.586 399.486 mo
279.437 399.486 li
280.271 399.486 280.886 399.347 281.283 399.069 cv
281.68 398.791 281.878 398.355 281.878 397.759 cv
281.878 397.169 281.675 396.75 281.27 396.5 cv
280.865 396.251 280.237 396.126 279.386 396.126 cv
278.586 396.126 li
278.586 399.486 li
cp
278.586 401.63 mo
278.586 406.402 li
275.949 406.402 li
275.949 393.965 li
279.573 393.965 li
281.263 393.965 282.513 394.273 283.324 394.888 cv
284.135 395.504 284.541 396.438 284.541 397.691 cv
284.541 398.423 284.339 399.073 283.937 399.643 cv
283.534 400.213 282.964 400.66 282.227 400.983 cv
284.098 403.779 285.318 405.585 285.885 406.402 cv
282.959 406.402 li
279.99 401.63 li
278.586 401.63 li
cp
f
297.454 406.402 mo
294.459 406.402 li
291.201 401.162 li
290.087 401.961 li
290.087 406.402 li
287.45 406.402 li
287.45 393.965 li
290.087 393.965 li
290.087 399.656 li
291.125 398.193 li
294.493 393.965 li
297.42 393.965 li
293.081 399.469 li
297.454 406.402 li
cp
f
306.36 402.948 mo
306.36 404.071 305.956 404.956 305.148 405.602 cv
304.339 406.249 303.215 406.572 301.775 406.572 cv
300.448 406.572 299.274 406.322 298.253 405.823 cv
298.253 403.373 li
299.092 403.748 299.803 404.011 300.384 404.164 cv
300.965 404.318 301.497 404.394 301.979 404.394 cv
302.557 404.394 303.001 404.284 303.31 404.062 cv
303.619 403.841 303.774 403.512 303.774 403.076 cv
303.774 402.832 303.706 402.615 303.57 402.425 cv
303.434 402.235 303.234 402.052 302.97 401.876 cv
302.706 401.701 302.169 401.42 301.358 401.034 cv
300.598 400.677 300.028 400.334 299.648 400.005 cv
299.268 399.676 298.965 399.293 298.738 398.856 cv
298.511 398.42 298.398 397.909 298.398 397.325 cv
298.398 396.225 298.771 395.36 299.516 394.731 cv
300.262 394.101 301.293 393.787 302.608 393.787 cv
303.255 393.787 303.872 393.863 304.459 394.016 cv
305.046 394.169 305.659 394.385 306.3 394.663 cv
305.45 396.713 li
304.786 396.441 304.237 396.251 303.804 396.143 cv
303.37 396.035 302.943 395.981 302.523 395.981 cv
302.024 395.981 301.642 396.098 301.375 396.33 cv
301.108 396.563 300.975 396.866 300.975 397.24 cv
300.975 397.473 301.029 397.675 301.137 397.848 cv
301.244 398.021 301.416 398.189 301.651 398.35 cv
301.887 398.512 302.444 398.803 303.323 399.222 cv
304.485 399.778 305.282 400.335 305.713 400.894 cv
306.144 401.452 306.36 402.137 306.36 402.948 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.1.0%%For: (Stacy) ()%%Title: (!_shablon.eps)%%CreationDate: 16.12.15 14:43%%Canvassize: 16383%AI9_DataStream%Gb",KBgWh$YOMDop^cUU$O+Clp&Wm1K`Gs<'PQ`+LL^H8fp\a#I6QHDr^sJ/`fj)ZJO:U>jIZ7='/X#@=dC@:[cch[c!I/MD4G7.%s/`&]e;A,l.K#en2a>&U4nLe1$KR\Q?JTC=&),9kfBM@b[:[%WQHK/G)lZ!p*58q^O'\s>r12!]gsY<>HtLti/Q?LlU"QT\h3==.%&>l!reTW%4"4cp#K!!MX3^A_<DANk7L9]([hT+5gIfN2IL8$HuYA$"oXjIYJ<E8hQ.*U1>$_IsCo4k2XG.Z::j6ImGPM%g=Vak(:%j`'Er/]HY?"o+J-HPO"klZ-f>@4D!)>tdNl9<%k*!]j<&"Ptj/7hPdj^R-#Ar-q`ardS$dn/)();d)ekD@R0IfS.J_S&g'RWf$@`%8G`dN,dR-rX1)h]f:r@G<?l@V<qq1*5=AWk)Ci4*kkN8!N0L$o:M/:m83#bgYH%>D/[aWLAZs@62Uh(8<W<;6.&;M`%sp1;rN9#b%!inut3Lobhc*CCQdXo&aRS1OL&Ouf_"chF4\^q"ICt<pRppH?gLehr8oqM?(6fDOfKDh+f3,ZGX$s-EW8MMg9d]/mJWlBRGW]r6c%I*n_j'.m[AXR.r^_,),%0^cENkLIT+M@E6;<Q<""]3R"D;JN0[S,\D.:YX=t*<1L.9-Cb!obmmIVOlrD,\^?.HUlHM<hl1#erf,9%paZ`8gjf]-CS(-9_/K/OeU&lC!r[QDV?s*"%;^+R%=PKW%r+9&[,#Wn>.]bdF)E."DOu-Q"%9$BfPeQdMc@.@lWg6GS'BYr.U#)b%iiV.ZG*gf(37^X4e^i`uoG,l4lN]UK9-61'<i_h$h:>$&'\?('pRjbHgD.:&!H!0l/+fb>hsn+88i2?D\4/[d*=2-L0YEB/hKu):%ZOMeoSD$4)!Im?bZo"V>gMR=0(Ao2;8Kdo';-Hf/qTEMgMTUUX5J2O=.IeZVD3_/PgQ9-=Q9"g/G"WXjl<.bIDoHI$!*t2emI'FT%q\#;tp=sW_:GB;F*csVs'Sg#0=[#Vs?DH9^pqZn<V5+A:k-+u%ri)MICXl0C'KlbC!/OZK2=Ka)VsDmR[g&-'clo@qJo3GpH*q6W%RZ+ma!buLg_eo,WH]_j^KnU[d&.<g?&#3;rc;gkR=R]6Z]kZ.,F\f@#6;'%UFQ'YjU=q8G'JsKn_KmN381Q3cQR\m%:Ijl_@=1@9%k>m5-WO9:e%su8S?prr!I'nVsJ_U/[lGIp_iLbFu!M<CXmb?9u?Io8s=IraA[+fJ*M:+i#<c36nr2untGC`i32uHbO%oTu$\%i\h%IPJ6V":[97ULenb[2q!n]3=W/$n9_GlVn-N(WD[fP(j@JH@F6^:P<*Ceu<>GHBrrEYp<=?R)h</:KO@]XV7&S4jDJ[([`^k93&A^%Ses#"lSKjuZ=.5iU&NAK@fC"&k'qac7O'lAR]Y=[T7Qaf.!]<ZkB4eln$dZLFH!&hm<-5)+&@Mrmae@6a-+g5eb;^BpQq43RE9#Y%SWlV8W*9EUDCe3s.Y`M2"=-DChnFh9/&k\;cJ4F]BR;sj0W>]KMn\1BFN4sBfa-*J/s>)]3(4D<4G*%24<R/=?G#98F0BfcRb:69%AiB'BY(e,9iXUu7gBIUo49]08a]-.-`\8t\)$]aDk5tH?*V+[!:5-H6!#_J?qd'I+0XX)cQt?iWb[Jq4%b!gTIfCCb9%sN=](W"(%mEAh4$#l<Pchs3SFJgb?pfQ+kA%KADR!D@]O(m`29qo\(hZJog#n7R:0nE8comV1oUC4Qdr&r;O0e;P]3Z!Wl^OP[j=fjVVO%ka6%cE.Lqc)915)"1UL]&gU!X%I*$8ITULoURSagMX4DWOe)UE(QNe_fbljPS7`9nm/3""K3\EAE?%"J9nP"l$2"rU,#/0.?S@>Y)Vj_%qX2gg9[Ud!Da.[EA$>%'F3R1PlS]BscsVhpfH!LVf@E0gB#D4f?"&^sVec27GGj&q\0^UBjOOqH2l!3fSK-_SIW$(hs1@"NQEdWe%08K@r,s'KGqdOfK5W5hF,a'ifCmqI''gkj<l]90\b`ZB6^[]tVmk1hWM6O`Tcgn8A!=-kaUK^D+8GP=J2t'9g<CJXKVoU'm2et`X%67-kY\1_:gX2R0g<A]2'-M;UBj"^Ym0@`.GT(/l/jY5t1eCgDFF^7%<2#Y!B_&s/Ej2ckGhjO2+qE8,n?0ttJ]l!liVIECn^,dWK%&112PC'c5@2XP;5oQZ['#hVn"W,p:#T6nYk.5F7'08T@[qgT--=['rM<B$E/P>"G0aaMLNcS_3"CtnR\2a3rt\X>4mGX7hKE,:\/%ErQb`=F0mRfsY+fp(C%B^YJ4g4O`aX-O=rklD202=\@d*hYm/74Qa724e(ii"^ZL5?>WDsjaSotdQKQ$PTZTI;AIVR%F*DL^GcCq%2r!h<I(XIie^"r%(J&Q\Bu6WG;jSPNJ'J_"-*VkGIJ/]II[lkU`!M0.@MR:=4:.Qh@@1$[:.aBubYE08hKU$#%p%gFgd]2^*I0NR%[l?\?EhLG>#F!3K0s=:%@#\A<CY0E5UrF&0dbdn7rRlE&-@TN%5f:MmLXWnX,V_Y559hpjmBgVGahpUep>"45/JWCERMrs&374<d%q".-mi$XH\*(q[X8mj1Gj_fR^N/uji^94$dle%B%'9aI?iK*GdReW)FWQrLFhif_hj(Xlca\OU+-e6@1E6.f-hpjD0Z`'$<';na1%eIpsZea?g%gE%5:@u50JjXNHY1S0]4jR$mNeUG,[L05K.e^elta`JITGR%*V7Y3?DQ$W,[Ls821<2?h/T:S8R+\5T.rOsHA`tB.>%IL!o6)P0#S"2*^G9)(m5G_3eq',Zo$2A:<fc+EIL`_ZIfml\^d.Z3%Go>ad+:2l1(0/S5\6)ED=-WgSPe/atKDPLB2U.tYc(B0P)%(U[^JD]2%.*i)(ITODj]U$7U<bgIX%/6H&d#AF_U0"7:<4GX.#0sR2253>-V=W&PDbVXYHCr2Kt=X(d@,smR"aX91_U3$nY+VN-U%Z0U@*Y8p4$OBEdG/.pl6M%K%Q-:3sb5pA\u)CAP;c4V;g85kfA5pA\u)CAPVB8I3"+q\:YG9Nh2O!DaLRWS3aN>Hgcal&WXrT<p)%P@rdNJF.gsJNN.EqJT'Nm%3A((5()*N0$`ZMN]0k2<i_Zgln4Hs7;RkbS8Q?"_IZ\("@K.B*rCNTOnPr/eul:)ZVYrC8RWk<'PXV%KerBY;burKBkBQReC.)Sc.(4\W@)t\j7F\mNi,B?c!F\Jc&e_W`;39TORZ;rB#oIEL)<P*(n^]E#sCtFrZr;mFYi9r5FcajrPtrZ%eD*9d2gJMCH5'N:X#Gf?hCuRAiqA4s>u`V,<:9=WMK/K=C@A.#2Tf@&g)0fMUF^L=cgBkY>W*]>]lf2n/\HF?/2^@Go>^E0?bmA:%0Zj&jUtE8YUmM2_<`8G%FncFG?&&ri^Q@E(-^K8Qq^j/6DE1A\]'@4HBIBN`@WSpF`S4ZS:O\J(Fif+^3m"/QpLJSGlHC*&fY?5`%RICZdM*M#c,L<>bgmOPQ"FRs`n%o2LO8:QqACT9QTJ!:oHZ5ZYJrpnYFX<*%I`EZf]h<t3Y')J`?8mEVSYDr(W<Jc=@@01=3\2pZ%Sep+fYA)H!G/'JTSt3GbKYVEEEjfKR?eVcta\2<(7s3+#/E7#(m9%YW/8%&10g[f64-oX*Xao)bjW3elOu8#AQE%6^bd*`*;U0G7%B=jCl*-dt?;GPZI*e-=MVq8)%JU`pR.c!Y[#n.nreWZ)`8E!c#k)WTE21L[`W)c'rked(Z&me?nSuDYZ'0&PEC8KAEGe%Dgr23#9%"_F@DXV3!7R/SBe.3TA:9&=Ne_CV36$Ra398bX^)P\A%+`KXshV--J@c?u,L<uebN]mei3]Z*"b$Jmg;R-Js<rE$C0o=F7)YIr_.%]8`MRYd7`dh\S"oI&,*e?a\bV%XZAkf#N6U>8K/<4;D03r^[ggOG_mtPTsN]s/Lk_kZoK*jLKn@'T;`CM=l+=kd7u8QppE'Y4#bX%4'3(-e$\jE$V\[CckY-!8@kZI3X/73rJN#uE\]^g0oK>]@McB'`;h3jfYoCb0oK>]@Meb]Fs/%E4E_kL)&0rT`@`LWP*s9A@d&Wd%0(*2f][crNHQ.8k'#)p2`a8(uRs5ZW-8lJ&IN?SGq3..hUh?Rp8:H0>e<>2(5J_p&8Ni5DX*,$/lHiZ$'^='q5)k%fm]aHEa70gU%d7s%+qui5C5B.BeneQmM?-B,?H5V2aRp@UeQ]#!UMdj,T9r+[IZ"r%Z>+'*:<[P@DSm<e/#_>)&I/:%2\aR#3**p)9k3r?6UCm7\%=S'3c(d.d-T\70>gDc.B&#Y\J.7/<Lr1?%^U]dWWIo_ZRgcF`F8u:Qj;,l7U3SAeOGia&53K8N")Xl.rr&8H\CImF&O5Errn4=LQ%^D5LqJg$NW5niDd0jU1h.tk[<jWo+GU=ekRJ[>P:>^2*GCk?]:D^G<?4OT_3'_I]J=CK3o3D3aEhhClr#knH+oUf83?ks'Y((o[[%&hlUPW'.hVJ-;gs+or@S@OL#lR7.1SHi.K<J>jH==X7D7+p%Gps6R<g&pWj)IV>SFQF^u$9s^92H'Qu"`ra$C>Ge2Q5(#'S##g*]%@iE&W5)e-t,\K.!ZBI6h'-#521lo5uDJ<3\;t`khfQ"<bA2kceDgsle1:-8S;d@f3Drs'$4'nWJrTnfh;?A5LYP9s=m+L2DEJ2R(%:79q/dN<s0TFtj<Vp);=q(!uHpieC&bll%.o+$kSmRpKA(^lUPZ^tQAUf%kU'?X[=QlPkSB>#33c=mWT-1NuBe]+.cO"bZ4VWE,W%=nFC3W,W@=Lm$+=b9OUY3,Z6<SIRa;2[.$q"Hk[:R7%?8^OLMsh/S1tPf1n1Np2UtO3[foRK324$plIYAJ-2t1QUcmZ[V$mc$ZCV%cSTY@`lr(aq+Na31Q>b0B0OegB:<BP?.j[qGctiZ$2U(AFJiHop]6gD9bTGLB26q"Bpq%V\*@oLpV:K86Gq#]\mqZ&UtI;k\(q1U%FCID1'fN`h;^1#cT@\0L:95g)'KW5Bk+5hm5Mi$"S[b;fd?rQ"pTqL+-;(g,8"EYP!qeUd1#Qs?AeVj047UakN/WT.r^mXT$NA?>%g0)ZP?*:(bW7c2aeaB';,]UUppJ7NMl$9NqRj&"]Cl2iGI9\<aFR<7L\gL4h3BsKtpjEIg?L-U<HPMa8'MUH6(VeF7=58s_<,rYS%'TphQ*tV/FB+n/V.=CI"r4Y^B>dGb`gKb\ngE`6ab>7%5M<FDLbm$=GSA6B9YAieq-%40Zig9JZ:D6Lg&qB4BiM<DmVN"[>Z_uo'%OV6*L2gMUO*SE<6n@!_9X/.7m>(6BikJ*aXI(^K#E<l<NM<WajVq#U.=.q.GEU.`&1P>Iog5oB]G]Me<Y*m6aZWJQq@[S)b2hAl/%cqmYSZ.pkkHF5,XB5ug3'(5].pa17c4TXFn-hNhp@7=_Vfps[q$(nAmG^Z#GIYM]$bCcJFRJ*'FCco14m9\;U,^5>G`M/GRid?F`%@IbbaYUbIh8YOD[ZC>/3-?Un5+>L41C]XfL;V/4mK.pNL-IU;3fVL-M:Ams>A^_;]S\;lt)<:3&<:U`Bs6h*b772QSDC?BL_nm+U%GPC?MV#,C6ah;qYG]lO;A?"S"$VcVq6"$FP0M<kST=A5/A1Wl8.tJW.bM>4QgJG:6,*->n(7Qg*S.fi@d35-q;%mXVBE%ijDKRTJ%a4\E4P;GR+VYK;(Q17o+`*OIgIh,>-hQLnIe/cBG&17t(n\)G/1q=J`Yq+XYaj@VRY*pYOrUhUg%j!79P/`sCC!I@((-+0bDc`r&%<4mCJg:deHKYOc%:<u+9f0)blq*YJUeC=7F#9rbf_T5uXnD.Bbdqb0XVar>n"%c*h.4'+DASHK<9=HBDm/F#]ls6G9O@t.;P`OR:%UJja')>`F81ucg@bP/nl\rmdfZ+e2*#pERHR)LV&n.u:[18lt9g0^6&e)O;1;9qsaR!NN<o);,A=*ejs5-rFse#c)"G^0EX#!u)B%1`H\H"PmFi_SKCD]\8H3be7`L(Ron7W:f*+qt*S$gd7mn4S)J(G->tLg2e5$\^sUD\''<Wk\hpL1$@,&eT7l67EOS%ZaL5@mZfD6%5-HT9dMs.?5(^odP;ECu5^aJaM`b'0ePf.=k^WAgaqI`l'Q&VTagAZMGSb40DY8.Iq7AqB^iWfU%--c-K),fenckljkMf@HhPtjM%&LFhL(FIVh59F,1*6p!Ie$2R]*3QY_)(PZ[fnO(R%ngsP_grn'ZW%#M9P&rM&Co-ue;)7QR%3d,&,br)If'2mDdZ+N0D5.AOt$S/%_r2SX>+Srp1guJD8Qm-F84_Q=(*0nBYM8`+U4Y7p_(l^i&IFJ3C\0tk<>^V#UG,U_#VLKgK\Du7S)TFC/B%M)s5s1:EsJPPK5?'m%hqM.cW!LYij"`kG'tB8T^s&ZO7t9f:bo/M3s.frC"V,6Oi0nSMH?HINo5<0NRm13Ors!JZ^Z6+:rXKaJ_2grb"=WQ=$%K^H)ea_W%lCL3\[F3?m/j*ii:4KhAcMG%^(<RhKS<k+$dY[lZV;+)32XkRYYpk#r'UX.+Fl*`L`cF[']mR:G2S^>.5[UWr](F"u+@B9+-#[Jl%s!@?5N0j@h7,qIiYXoJD+$5X04OHg8::FC+>>os=[+O*9`5H*3jJ)SHjD_6]U0WFf*iP*piqV-g`R3<@SD-Hn50VGMjnAn]`cjNS%3ji^:g3'Z<.&k`ac`IX(1W]`be:6t@jb+;3kVZ""+FMN+/kH+)c%6TlS=m3#(Y7$/=6].^X63u&:kZntS\$1gm&5n:/*9"P2&RnN%jDS:d0m3J.,$'"fEBO4lO/q,n[[V"r9SrQpF0+]9cb1q^rtm3Km,jLjojF=P[UEM`Ci'uWmCGCQ,WZXB<,:@3_@]u5dSoV!O4DJ!%<ju89r\'\G.M][=>s+RW7WT)dogZXU'VR']rf2^0;1\^"JRmB96tC^T8AlqQBJ&n`kLQZh6jljgFMa$1<kEY6p,\c0Y=)6k8F\d6%DPIXF]\PYJL\3TgL6YEh3FS]'bc@@]jkX20T\[P/+UN8n<@5LR)S982>507U8_c0]@R6auTh3)";u(jn.+Gr5>B[WrNl<9`_tfXD%4=Z9&W[.12.Z=qf0Jl/hT@n?bDS(8HFPGmk4m.o9WO?`b0N5<cTVT=cQ?+"[gs-L64+6BWZccJ9!&V%6roKu:]mmVmX`Ci8SlN[.%8<l7(@d[LED<"&$WUk;@SE^6:N^XR]!2#[6WiPj_Z>)pl&u+Ze>&MN!6^RIP/NA6BTJ<G+Yt1Gi,M''2F\rT?[ek$E]:I,/c?<Ac%0mK/OY;e,CgeSZdp-Nn:JJh=&<RZLEA9Ln>?FQ=`F?<d3*AC]SN1_gUWQRc;FP6#'J`LFH26po'df_"D5d3a_?.%=`aI@jq%f$nl%[+Uo2Pqi"&?CD@rpUkOS=&0i_J4ECOD?gi-:^o=,6(@ONWBq%g^'4iC$#DO8DPFBi%"Ln9H(BkD@3d7!2\NU;)Z.3c$b/++%atNs%#I,ejNUr`gm\LD^/YDY*1fI;;!<8?LiL7NoFpn&TKa_(WBLXJY$*TV$?E"<+5'(Kl?!B%`O&E+6JjI54K7@8eSHBV$'3uM?_,KFj%>Ae_`MV^"i2S*`:YZeHnV)mFUo.jGEqu+Hh.<+@uG2+_>%(c/d]D2qbNADK)P/V%TXl1,?A`X!6)#D9ZKh*pGc-gXloOVXDd&Y^p%Oa?K(41I1lqkl*/B1h6qNG^TWb]#Xrjl4q>"go3W=$T(EoE[8R^R1d!(5$2NJ^b\?1+a>=Y_]bSO.PA/f_VKbW;PlGa\r%5RQi$#%3lEGHglsXS7tm.+%OL/FREC>b)qWteZR'hXJ(q+`621r'<j1'\VF@j=oe+cpU7L=3;=,uZT0#(P+uj*3mO+pcqNK(5V+Xd5NPSTs%bNq,Z[3!u]+8-3(qs5h/#t^MCk]TmODCN"g\]dXQ;/ZC$`3NT"pT@Bl8(-aPT<%O_]25V^2X*VO,*@K8e5>\9d]A^"#ULc6mIso,%lRs5RHape"[3PD^p/V0/5K&QPk#9<.mA*]i'^/VuAVjU5Q"mT'2(;*C7<EZ0Z>@pRF/<&De2/.HWKRZ`YU_KU&E_0$.d>RMb3Y>=%&bO#$:VPG\<D.".KJg'l"Z4XI,(P)0@1[f+pQT2g3'i-(p/UC*;3W5e5.7&&c$F]K#`c%-Y1]Gu5L)V6hcGns#cS(Mbnq2+F1bQ_%8t\KXFFJ?0U?.D=D@)W9Xa7&F-g0#pSHMq@#u_=UZVd*GjT#RfLZI^[;$$io$_gpb'DlHsj894$cgF=cR\T@"4h^$eNl-k,n_!1b%_,>,.\ir;&RD7Q/JplR\1O^T>9n3nG@A+.C*a:UQ?8L'9/<q**SV51/8daOs&J2*SREiSt+#<us/V@`Hh#ST\^&mcd_"G1ef7t*"%OrY7#4bCb!Y`DE$G1eAVZ733XVV-rVQE<k+D"F=rO&lE^YMthY"7-*\(&^P->;Ks%#4C8k2bV,Y,@%:JpUG?bKYA(e]uP]W4.[W7%VU[A(\GDtGQ9M?mlRr$#&MGXg-fs?ioD3%p%.25MV39uQl+r6:Uj1^4?Zu:(ZPZrANV>IT0V*%5NmC*B=5@M[g]7,`230^.Z,Qu/%l?$h+12i&_52RQBD\Yp'@UX(d7+#&G%ZX#\OVidQH!Hh$D(m@T2it.B>8/$m?mm6\'b5q-`"!`NPL<WN>ocs<:).42YYo!uVeb3n%,qIYc$HLu,XO/?K@J@4I7[KCZDZM*ik"[pZp*Z,DK19_h&Ljg<O=0!p&#DI5%52f8?&"(keJ+?bNG5JtfYD0!.1-b!08%`gluf>k%%;BZVLD6OUE$c2A7^YbjV2^@pjkL?t5GR?@(64?j+L/=t\fUY@_b-/^%2e@_`WSenJ0fi(crgh/Rh95djYX(=YVN^#eJVSq!ZqA1%Zi.YSRu]-i7j^a,@G^<qHDJK91*V"0.76bUbpe*GA'=fh9k1*NWg3Plf0R&CWR2S0\PT.25.J@R%]9h,WTLY/o0JT[JNGGI?3<Pt%UU2S<lCaD(8mJ>0=2s2E(f;!c]3FY,ZR)`nCLo%(l5LQ<W4EkOP)^tiC,]@,MR5Wm<Z@=dQssps(t?&jd3(PmgRSqO(:==_V'A:b%Y!g^JZI8T3^jla=85M92,=,H=NOUuIBlqhcg1^0!bI#ugAn.'C_d]1nR6USU\2!7KTlTK[Y/FHXXiq@Zh+9Q<F13)6)@S'JO`<ua%(b%=E%T\h6kdG6-7"1CD/RFQ*\^#n5p=e@//n#p,M\5(Ui"e!j[^Bct.o*/Fdn3.($GnBl^/F?I,FgYki_#f_R-SbR`/5@c`oG&p%/B;rI7[JcsCh/kL[W`tQc]Eb'<b[4fT`Ubs,>JEb^#:jW'^50m,[S5=Wa3rCOCOfc^*Z>(*URmZ1Oe#M;O(R`1d[FO);tSliY7Fg%'m1H)IqNgjWGsOVW@jT5$_>3&Che/EB/7La=4B&Gk%N;]G*<?I3:9-OoU2_=&V<O?n3+9ZrQclJ.kK?>?MONRHE_B!]qdE4nPm"7%-1@@dL[@1J8+Mt619=I=>0B!Z<.o0eY.j('J_@c>^dulO^>6aRH`lSjO4n7fL^)4D;GQR7*m4A=K4SP\+B-@>N?Bqoo>&3t5nDQ(%?p>m=)6Z:a5:2aSi*G7e!cI%GN"aXMXL>pcDd3bge'M0qeODLKL4utinXAk9ka2F;osa96*633i=6[ZFs/Y;80%am5Ud(!'32oA'%g_!=^)mk#FmW"A%HP,>Vhn8U1[j)aj][Q8V>=JiHjYk7*-"'[b!3]?iq1Qbe''7">A-#)EiW=;RY'@&OI9e_j@#SX:R9eJ;6,%:V%ZNh?q(4L89qD-t+h;DoZ?WVlICoiWTf/`sHd-DI_W&d>)?&YgmNp-fk4<!#QkprlFl$"//V"-M1`XQcjkdk7QY:0M>W#S):*+/@'%B+;?8Dc)H<,8V8h+iB%B2^T\VBKl_a@^lXirir!=4-X4h-I7elL56j,CK6u3Yo\SU&\iS%cu.E#KRYr8Qc6a5M:Xn>LZ7<N5B"OE%2?!)kYLBWE376sZC.nf!RaJh<$m=Iq=Up#lEJ])b*4MtkjRe9C@+/U[B>;GmZdB2Z%IH,ccC2L;;oO?.MOe`VXM^/S&aB]mC#>G3%n(^)47qL0Q&98OB"6,l2GXXE]+ld>bbCmHi7-p4*oi<SCIt>;ej>\.HBb+_%>PU7/Wl@&EnU0Vg/:EINQ7`/=07J.8C)_%1B1hRR%RG0=)J%Tsf3rD#3SYXY$p.^-f.[(8hZjd*d'&&Nu'N(7+NVdj/!We6SQQ%.>U[uYuYEZtqkYc]66-,)>-l]IX7>,bRp`k'IAKjD\%WX"_[:;Um=ac.hTnWB)6GkWEo)o0!^)X,gF\m#:,mF!SMR,e_J,j2U\Wcuu$Hpjr5lA#!qI7>9#_9s@J3/ka8a;H&PW_UaNfW?04%*.jI-C5jYZ$;3:5'TZ^@i*23pb%[k67`66t,o/uH`&i<QomVg=3PL#09S%ndl<\]aZ(%3Ipt6S#0>'cS_fKkR7LBB?OWl;b,Z/5R%D?mrH]AoQN+;[.7Bbk">TgR?Sc2MGN;D"!<'MMSh$P">rgH9\r;l_gT>"TF!jV2eUe8G?OWGWC(.=%mB\T_qkk#/TOR'@,g6[<1?%'KUJcSVr=cH.jMPgZ&2&hEZ71J8qn.@T2ZiHAtS1BJ)I'M"-JC;S1X$Zf)W:]#8ADf8QA%`t(!D_e;;qg6.9M+KO_rV2n.6Z39Fn%f$N68)_M$NDAWQX.(94uJLZI6e"</#Tq;Q4:&ZT"Ct88\1Io"3?/*GQa'-L[!9a$AqbKC/D4E_<]'b#LI\f3\?cd2o\*FiGkD]_M%$4iF=T'!%j](=R%\$KX0>2+G6rF/QP\Q8Y!FDnMA.p7QXFjHXl])G5t3r'lno4@%Rk5)RZZd"Kk<bJc1>$[\ghcqfuB`!KiFgL6m%Di:)(\p'C>5(?GPVpeGf#J)CN5=0j#^+d<6IG4,OIsfN+T2q76ok(ImffeV,/A3_Zoa6!CnO`FEmHMaJI(l>f3f@kAZ/nrdpMW9G%aW0KlmtZ*:QWs?u\T(dI]"-B`f9c'Oo=`#XG.B@e:Wt;9LF"HXq0HL]CR_^BCR+6T2g8\Y@M*d2J!)Iiim5l/QVUD%4+M?!p[.l_%'7N+?RGTUb500nZ59=Ht<ZX+X%NjJHDf4G-Z*73].N*.@EYnT:qF5('Ha8laZi#5c1\^NI+m8Ni]m0SBdD^F2jBgiLlI&_0Gen`=%b,T6bX,k$!<PQ3sB5@)lT<>Pf^@X2"UF/8<s2E7U<u9TG]Xe%@lXm"kH<O[%^:1gke\=5M>1RGdU1N&T?++jc`e"t!q,a-]^c(MX%B:W^.H**N>F^][NhXcGdAM78o%dKR9O2^q>h!W1WPHAE:keO^pIPr:]Y]A!,9,m?CT@_T!7pi7K(QE\_k_8j!&Iuoqo>H%25X)m&%?7qZs68[SdM[K@XBJ7-cDEK@1=SgOe?;1:dNEW#"F7[Q-_d/g^0>/cMLgM)K>H`>Bh"'$?hO+.:h$)4)TIdd$Z*g[q?_0Ium@6;r%=>0]!o8Q3p5T&50cPiMo.$T,p+Rh6VJ1WlJ`'U%j0]PGWInHdH/bi4&5FF`.RH+4+V0lkIp!55AIJPp=T"TL:*6`nWQeB\r&+Z!\%lHd_I?e<Tdk-Op)j&=7I:M0FOegXgLT@H/:p'^[<-`=N?%s)m,;P-0,j=8Im0_!&*b;q15_uB"tTCpg(rSk08L&>EU2<TtFBJ009%qV>3KmF'2PmS?U)$e'8Xf8mNS1WQ]1]g:*C3%OO8+,CHp#C]TA0QZr/h7<?`:Z_Cnp%ubP]MeO1WK@I&I,?@55rtSh04gWu\,NXi%E`O5`Iiu8^]Y*J#LeC!kbbnO]mEFfF7M<&4e6;lY=K&l-B9\D9:[6s"D]9[Y-p,Z0U#Qk'T!T8S(Zs]<el"5.#UL34^rId:R%pc=%9'@TqWqmAOmEoD2r*l^:Xd@lbAunen8cKVIm*sl^g4$QF[Bb2B`!qQEl+PBec"E(2b"JC9?9%asn`+1#[T$-S\,F^S^nfX]'m3a<%)jHl\6"0;V[U.#oT@B\RgYZ)pk!Q_1W`#[tPrGeG\[)7,'Mb+a]O.O2o;gbQca#dHja+AdGi-^b?[R),9tXd>)JEt>2rCQf-S*d2%b[KVm.9-3@,\o"I0=\GqbZCD(R"0&FJnr3)pE+R+'b27srd(X\2UA"F5R%0NJ#6SCADYRt3mhtD15EoBC\EhCap)ReE$9a<_XG`N%b!u)FTiE[\CpO::[spGdk/of;[7!pD9KDEU/Nj&Y'!='>?U9hk]%/m7k8b"Z\%aSumrg1RYtL.:/F1hMB9'^@b)*;sk54;\:+cuE%^:sn):jeF;T6dE'UY`6sI\joS`rJrnCmW_EnBmE^kN^*IQi"=JF]^Y2?t\BRA[Efq*cI`GkLas\\;@t,.'L)4F2^4FHc_QiE\@OI%Mm14VHruQ)ph(@B@?)hcTB9!JI>_I)o@eWu3J:shA!r=AJn;%E&(T-)XXu*06&"jTr7l[M?5<p^$/=FP@"6QN2?W#I"?"c0#\%j?%-jA[D#a)ZC,*N\!86H0ZHcHCrVoHS[W/5s=q'bu]8q.'4*Jn*Sg/M]*^CqJ<6WR*)6B?2mEPDE1@)3HF1[&DFDs1U$UB;5e[+?.N%^0qSdn2eXlY\bS:p_7;[F.t/^P8XgThN#E\1R==Cj+i;_9YZ/pH)K%S\QFCE+!qgl`<$D`"0+[bM.IHN!(e5BeoOS:boE>rcU4/+%n9u?UqdsTY^uq4tI:NsdetPmON+.tYHKI!=f-qFEB,sN`3*MGAI1](''h;#0@]%:oJDiee4LgL$#;PtPfrMH*[(HsnM2TlhOKgbK%8>HDfo4haULEr6S>[%i$LSi<3pZWK,5E\=Rj1dcH9tt>/j7f_rL!?OP0j+8e<F.AL9EWkgo4$\UhT*%@K4en#`K2_,?gUo9KB892%gcTlSmQ=SLG.P4a]);AW04g;,@<<$7]/-bGZ#i>#%/=:/LP?AbT<Bf[jJLhNmc'RPNJi$cb+m5U:D]PV7IT_Erq5TL=dbrLWL#V]%jS(To^9u;&Jurn@=gXMAnf?<<.(.N`Q1'E=s4>eVMk@flIG`a./K_0.c"2#dnf(a*loa`"gY)sN/$tOIoph*u_@$0Lmn9gQCd`eh%MS?2k.l8d34<%tlK+?F4R]Cdj?S[ER=@uu')k[+hF-=<r5tgHL3[Y5='4LP;'"W[jEL/]FqgQ-c4VYMoDXWB9GW1+$m%Y)pZ=Lt0%HjZ@S?_.E]d_7rRo-ODtCHdF^(=0:)2a9OM^7G;X-$'o'Kb_KQfbYg:Ipp&dkBDDXDTFa*/<Fk'rL(ZcotFHhcKr;m%H7l(P7)#Z%a=sNDoCIZM4pr^QG.)"SIjXK2DEbH-#8-Y&o@oW'*_`cH)]7'Q_6;tgG3e+Tj".=uDkbJlLH$_%:Uu55c5b@mQ_='J:KBN(\Z]nb%Hf,0*p%Xp[bdu<E3;r-?b=B+$0+ZV6iR:_ToY78Sgbd7Rm,d(:3$JSB4d[@-kSS]j?E2<nKHC8(=4YOeRY&HL.cM\Bfttb[QZUT3%<VZ:\fqZDbUBe,'STj?WQ`T;hX.O70<.'sZHa!gW`Q.foJS=N4I-0gcU\Etfq]AR^BS+:L-]3'"4$-8rX`SElZgY=!H5<imYO@tK%H#>eWahhZ%IIU'>gH0[P*NUbEf>"))QW#A/DHCS"^QmWslFj:9QJZg+7)n0V[u@ZmH6r?*XT(sq1ZXI2/T8'>^=k"u>?o`F?(HLq%ZWqC`l?$,VS1["85YAH/NO*P_c',V0:Y%.aNiK>Y3Bp'[-1*f+^t;f3^M6"1c=Lfg@NK@!i$F$O)egkVlrD<S'3YDk%Pr#%C15J/%o^%hS_:]4!@'c#sG,clY'imL?.^-:0k5&7Ti8mVV^3ou3[m,3s0OJ/<W5om`++VUC=T!Ejc+O%sb'Y%u^OB,,Qg;r&074-<_,#Q[%jE!DDpgUVYI./?)!s(N1G4OEjo=dHZ"J9iI<jT4++bN7F)J"$8c1<"6]X,@jSUR(.%*5&*f_h09[LfNB(P1@mehnPq""0UE>]\3"%c;m/0UG`Npm*Fb)MtOZ+%[N9#ZI_-pY2-ad[@qG_>Mo/#:;Jhk7tjlEgaXm)?S_J0o+oj5M9Tl<dCo6eF5uAo-i)SEolJ]/rumqY%qs<6'F*P>#T#LF$p/`bkai\JR<8e5-o@<d,kMe9S2@c\lB]kAM399Je-]a;qViREsbZB=%fp_ka3WEi&EIj(<@.'4)EB\jY1>t?#%Y<5"[M!7lo7J*gj[Ih\EaNGN_<U2L=D=d_dDE$di#Xa"=_!DgELEO^YEI&r%l0/:]p[e*5BHgPc.71Z@UJb6q5(1$J-J`^>OT2i^%/<7).3Fcc@If4'Ro9W=.hES@'Ph,U+MQD0^(,%+s[eAj2]t1W,r5:iV)D#r?'Y\J:]?d'X\KAP?)3CR_*EYu.0"<(rdep>?H]rgV%Z;3BsmR@#hB/#g)*l9%<rfjKOd?Kdup7AYRk%OoCAdm*A5@9oBo>8hENI7jAKLW0_`,C\Xj=<aXS%7h%`s)gX^7T,PfPSXM&<7,*%h0u][EqUu`/@3+"om1[BgQF.,J_A&[Ap_M]ThaIg=C96ineL?blII>dqkT:FcB%\J@p&K?IEXN$p7DB+U;@P19D%D6&:$P+jfTjT%0:nY:S:EScRB>M.jW'H:GabhKmD+V'<JA53k><Chq0HAgD4Vj;4FYS!1X>8s-GE%5foODPa1H4t,N"cj!DWLUiTAjNGJ7e#g8>XO%*:*hK\n<j#+@QMO8L`b5?F5uWmFklpl%QOY"7+.V:[9*TJ^Qe\DKRX,rt_Eja-4dBQ/eIcp'^Il0:tEZYACATq/Ii$kO>Zbo3n>T%'3d-+FT%Unmkn=)eM"f=VmY%_n(W&YeXeD"@qWQChtbjfjHn1">8rK]kMLhAIf,V9n%UO\jlPks=M?CPTr#-A(-p41o3eR=YN@@U%D/f358mRm:]:H._\*",0?>m7oII$#Gc#u-;?l`?,cPLS>k<gCoH)ZMH8,+`N**=&6jX+$enV82d75Z\No%Ph[4YST1PK.'(mltrH%B%ICu]B']J0#+'>plP5.^7hUS>7)B9J!WZP[]jEamI_-sMRJ"Fp/tDu2uD^uk/N>1,C(p<Ae=kiY=`&!3m4/>([q!uN3VsM/Lh)c%fF&E<7)'Jdj4H6R@A2?+.N&]ZGpU-@_lTaRlY*I%A+9"2e'(c,id1^O^UAnTYlN@=Ek\ukUqoZLr8^/<R2QZa4ta_U57"tR?'rRN%NJsUG/A).[qQ=Y"5.6IKk"b6??[0,<#+`j>C&?q&NA_9#Fg:T:eYcI]G@8tsR]T_^O3*Xu)jr$j/m-GGW%SY4<[o'UJ5SB1Z+%'<%A8AU(pHAgGPVHn*52/+s2P/&,]P,^R+#5_*_d/*h\65S;%\(FTIX1s+fsd1uHND^gqEhkXfd]-A^Odj)TO$3U%sRl0NLr:f7<4XE%/+k8c^hs*[L:0p;"gA4MHRhgC%D@_).Fq;'QM-q'!<^*=N%4R2&#S=Oa3\lN*S9o<I*hW0k!lJW.,3\YN?&J#G;t;+k2'o7he>AZ%HI;QLKZXn6-'InJiU,VpoMFDG<ZeG\#_U\]<&h"^R\1nMg8=Q%Hn/]FGIk<W]i%sW[IQN%hUO^RhV+/Sd!W>Op\a#`SZGB3aY-:n%<*T&Op0$]d=qXBbIX:>JJ?@F&egineh62-ocgn,7NF67`KP#,Yr5kHRYd]Z#L!=ZMntY&]H+a'DjRa',ck"b2nMsI_*nf2h*%c*G%\=>d!aM![SDO#MY:G_]:qB6c1AtO=aEn'TaqIR3R^45nM]ktI,mGol`QQMrWol,!4XnF@HqXqkG@'dAX)VAO'pW;"KqU]q!G$8gN%'Qs4a$+0W.93?6cXit4u3/K%lpVUTUn\`9BlW5!\rM+0Z:8.Nrp'74kj3q=EDB;F4T'+E/oAR]0mn;2YnakELGX9Z)(,cLG+cV&%%$<34mPCt"C#cH\?ajTcTlX?B*#69mi3U<X!g]2-&p%[96(u/@HQV5A7Wr)-*>?bOVgE/V-BY_-"ZXG\O(O>W>XB52r[<I2T(/N%2%>%oN0lSK1D?n;$/+Wl]dlH0DAr4@YVj6XDlkdF$?hpa]hJPqLsUtPKM]RK/I"$b(`>'o!3^N(2RaW/(%N^MY`Q^^3s5^E;R'!anX%Im8K1Whjemb/Tp:'GDd)AY3i[kFYaU9,l%r?Y;1gnh.BFU^FKU>R_+9@@[&s7p("??qb-)RJk`!\6XF[&c&(h:jW!M('j="\pMm'%!T*/-erTXDQIDpQIJ\!R%M[42a-blDc$0&WIg?K^/:8>hG%%YfhV9TKMahl.ENs79G2FpG-f,r)ILGK@?K!>hoA`VN.j+0MXF?nG%8>BPj[X=Z,c?GkJ5@;#UT7_'p!7'+!MtRsoo'AB\Qa=*CkP;=3O,kPP$ecc5*nHkXYU6`d\Vn`'8q+7846]u?(%ps\7tlZK=W>BB%i6u^FU-B7q2Zq<$7K:ih3]l1R6HpA3q%FYV4(Sb$q[nue%`MDo8(NoF2!2*PjaR67S8#W`E)?>Dn5[HLn0S,"5t)+-o@lJ-[_BAg%F(h_)G]sA!GQhM"JuAumnObfsd0DIG&N]\2a6LpW7pcq+()bE^dam9<"1)lZ)<T:cB<1Z6#F]u5V"NAc\+TR%F++0S117PCEV]79%bje-$M`C^nMr9hiMWa"tqikdH8`f1\lH$fNrX??4L4:S-AOTCEapj%Rh@!aU-Vq_!CE8kV=T;AsEXRLK]9oALGK-`G2Z*[Qf/PTi%D-YXQh/k*Y*T'(A\D+MeiKLInTgAMJ0DCgBf;j%pXdYU@5C,<9F8-_noQAf3Hs@GdO<1<r!t'*C]I1p1(04>!P@CP_U?@,,#""5\%Eskq_n";3ik3.u^DTka%mrn<<%:8`Bb&RQK;^hSs31Cb3"Y+HiIC4^ZYsg95*E?Du#DA_p.4KYjpquR2*fuY$nQ1q'Nc&QcR8VJA%Y*^-AJd_Y&_.SK3plC$Q+Y0F)l1@4r4d?F?<9BR*c(A-6pd-a-G+r'*l>trTOe+NbdMMqui^78_+34:"jLMkP[5AftY1kq>H#%15%r/Ys`.^kFd"lI17j-NuNb0RutPs3,jL>W.TSQf<.I<i8LKlbL^_eU@*j_D!*[\d<5&*59h>R;Qn^S?;@Z`i_5UPdYL]^<7S&3)Cs%GSess?+h;+Y$"K2%R&N*=ZQk-^U[OkM5cReYs*$O?PHl%rE])7W`\Efn<V+i$Q&+N\8A_C+7"_^md"5[Zf<sd26S%'%K4P/k!4:?%s%+eRZ^DH)hnu==,8I2VGGGg7Pip9?_IDfJ$)jjFl7H@GBdU/_1T@g_3qr]dC,&F=;>m:b6['5tRD-*biBQrK]]tku9@99ZMPdFg%6T7t@65!+9d]09tg0o^?I1-/@>$BOG-"+;nRfboS;&B@W:nkC`@Kub7/ZNW_6-\*`1=E$%\;-^sTE=4S6S;FCTTOCK>Cn$<NoT?9%>DF(s.Yb5K.*i_o8h-I$NbrP'be9b*r8E"I1.[J(D6DRNLJ$oc*u\g@NUnmC;b\dN@KIW_M?L.Qb^c!9$-3N4D)"C3f.g!%=.tl?%+NH;X)V.i`3G)`9#1BHU[&2RfZGOV1*@hI"dPXacC=`Gt_8&mVINMN_0l./[(c"_$<h+Xk^QS5hVTqjUfaWRIRe-]8efhb3\?b*r%!7qqj#J`(p;3G9uWbL4mOabPG1YX7jRs%uA/`N"[eekY4@"q.&#r'=!hBL%Xi<BjL%h(UOS?u`RQ38Z<O',YkFBnt!#RK4n,p7dJ%gGG]Y&-V3$+XYj3Pu`HD$0<'+`=r?GV<T2==H8f*Z"BkU_a0BP2@*_5JmtDS9P"j@7Vm)>2"Z>)1/pX++GP*:YqneQFVVqe0n:mI%s3T.QJtJ&)1PF-d_mWSAiRj#_'?!r#R`"s)VbIog%h=g-W,Rb'+QBQA`)7Q]Lm[J97cdUrCmHB"Qij+c&hA?sWnV6"fhAWe#9'N^%oi0Rr$<$<-[h',n;N`a-@5ps-KVPRkN!9cF=))%G#rMFUF.eS49nrISKcL<7a)Gq[S@ekQ&1#hK_Ws0O=b<%t3e#bs'TOsQJO3W]%ej6r3Gh&CM/,+..gob-*^;8R3CKIeMYCMa]9l=7GSotRC6li.V`\D9eJWY2Bf%"Qc\^)Us[)C[qX]_U5FU%C^9LUY]TF4lB(o_Q#%JH^i,>T75alpS"fW=g[N"&1%qCMX:+R"bCY5XQ'J:Q$[a&7A>J(tW@SIdIa"1P:&2THJ*2ls&G!/%VIL9qWV/8<.-DQ@`)'2OM+r%'e+*0[6T@?#-+n\W!r'mCJaM<cB0[OhV9nQ&qpZ$<S,2FaW)?m8JCR7(:%pF#_/3nMM[6MR_Gd/<[cnPFJRcVJ>r\4@"edr=:2(.%Rki':.;,)_1Isc5$CLs-N78bJXc1(?0D4U_TISS-BH54WFSoQNEbcghl88\KfS-F21^qfiFur@YAMtB5eR7:)%<Omb#ZMNqCjkkj%'to/0,dSWo_QjP]T9YRCF23q%7nA/l%0i3KROOTPdBMfpq5o>nR100N^b0FTTOEp_AAb`tnT,t*4e].uVb9f)()JGS1%Zlu-j*o%%/Q3tk&$*_P_s5.;op*lmf?s598IV\a+Ie*MX9:(DJ:N:Q9%@F&61l0`(Yg`4Yr0f5bLF)(>,X7(n?g"<@sm"`B]Gj4B;8h916<jm%m<R6&dO&]hO;S$RE'$(S]#f1Wh6a+#_qDu<n6-UL4ZFRQ8WjF/Jn%([)u<O)'V_HBNlad$>Xk2JL+Xg\#-&ACDm2fa3@^@\R#$-?%!N9`7AqH_V19bau'koEPe,Zet9^!+r1?"p23Z5_hS7rf[?eqBT0G4^k"]]+5177Zl8-%pt:$!XNQCp5E9[[atUeVBJYW*k-r.UM(%A&0u*:bHW"DJk!lZu$C^V#^cRcaIX-$/h5k5dlK\!OA/ck3b](&\;?s+5r<#!((aebTHnR9K-N@6=\q`W_mqTY\"au*l5&\EXqUj%(d!C)N0+61SE#9:VBcO/m,/\t]TP]Qe"BcOXY3b3R\H6JnH06h0G9F39Jm45HV9]Z)80#*EhYl2m2:<)%42<Vj`%qjq(ju;6_Z]p%dZ:8>'3ik><Yu:M#!bfcU5Zq(=WF4U1l!)JIT-RWcu^6Ns,,';U%U>d<b5Z*nC8%TEEGm@Ul+lr1rVUc6l9B+Zd&]!Fr8+?!?`dN%S!O7^=qa.0p%\c>OCiQqagdW:,\`Wr(`XL5f/@<B")au&@3;"9N^7.b<.GnqP_ScJ7=u3L*S"c7U148l>kAFt(TeRd6c5u"4d+3g%@MFr-L6!dB1=-=mgXH;a<AM:]Y!MS5_G-fY"5L1Bh[CYF.%iV>%u$M#*'j&F9EEX.:5B$WZ&Qj"%?0n<M%EPkdi[]%k#Og>JBYHL%TRs$C9"N,%S;As<A/P^U9ms5m@)t2k&1C%W@VD3bb$7I0.r6%;m;*J-k*VmCTc9k2"q3lhgG;i<o%=KrK(1=XO^*>d;rGYH98K34%_?%V@)sJVJ(t-CU+Z<t;(f#`*J1VP/Y,2Z&MjT#8,aLBnP=ZuA`gT=r5t<CA7)@duKcRE<5W#4m0JkN[9q=:2R=IU:`0qIi&)=P%%h29jYk`Qc#UeD&&;\QIe2\\X'p"25c&$^a+U[gqlbWM'o]hI<bZMi^-\-%OQ5Li$[/.;92_0(VE&rV/T"qZ?:%RIlIE!QLhAe;nt%87lb"_MfD`K9+YuOgh0^g`R#l&VMhYKc)![D`tm%5Y=l!L35g?j\cSI!!q6b=@]rt3AL`7ZX[]K07YLmCTQ^.K^i%NIYRgsOO@Bi%Q!?qTcker@7H[op-rc'85_,%l1Mm<I29"(%A7Cin0_iOW$&8"KC**ca_GOr,>,FS7O>)lS!=..C%22&RP!bUf>)b=m[hK<[s"KL3%+P2i&nBjOH_5bj&Mo5m%Ig&np&8)`D8`U>L@ZCJ*L=lTefdRBS.24"oBX!_'n2CP=;,(M-g7e!o/@K9A5pI40>&_&N)Ycae723W"%dJtdldEqL9#QdPjMF8;/6`P!FUN#B^;fF9Yr'2lV"aa3&'Q-cBAq=7k2]Y""L%f4p`+1^o#]Eti_"L2h*/bqQ*s$Br+Z49)@p%N\%FWP*[iG?=r1)qGZ*!R/fR'_f[<#;bD9>u(q-pu:A%1F`mN%3$k`e;5u1($o,#danI@u-Zh%?++TN""DE6Z+oQ`^.C_O:^?Kj!\$W%6u0U^^,lZ.2oWI$+rU5L\2shOU8;N=;6=Oh9k^Lq=eegu1_!F)[RF0m_LUBUQ6u5h6p?>B\^18/#V*>+KVfqlTK[8.@0d$-7mB0?%(*t)^0<Fi$fT?5>d?7om/J`b)+(^n0E#`,MYV1tCJLM>LpdUofUV-chXGa65\oFsYmP&!Olu`Sh)?rZB[+7$#ZOEGOJMN)u$Z;o3%kWT'gC_^#'@[)VR6)4En^TPkk&kk.!Hrs6tR0F0^'rAK]Yd!QQMuGMQ"122Pa=Ik_7e/fD9V[481WostRt:PnaW\$$DOEC4.^8h:%!HQF\8dg)]rXYm#[t`Z&Ybm!)O1JI_dgLWTk:Ba38-&t"U'+D&TuIQ.igaLgo[=ic1\aEue-5#3e;]$q3mMslfSh&:M$#LAB5*TD%&u$BS%.PD'hd)@I2Af#?6(PkG*_3Wc9L9[GJ,t=(,7\.Ta)*Z1<=U_1KukK"%;'X@kSb<l!7J)._,QBf+O>&L-N8UhV^"UY<P`Y_%?1ei]dku78&4UY%J=*cS8E0a_7urU8DV40(?R!Bq*G't4MBWZFLkB#UBhj7g]E#0u=qY=/-lKf)pnc_W6o$#?_d]dt)NKOS-L+u)%Muu((:r`hK_Ftsc1PFDh`WQQ7eP'E82Hq0^W"bslTOqZ'"iLR3<%=.82r!I;'2;[6.HL%Ba@8jRCZtIj0n1m8#ZFF@o8lH^=N."4%d3h"c@LlP):%[Q^Osos"R*GCgefB_&i,f#B*%a^?*@M9R$DV6rjOlNGa?B]!e\Q*n@SD,9jq<lbO2qpQIo*V)/PIl-&fm6M8qer1%#E8[,D[jZ";]2Ml;CDqX;j[^I@qIF%m/nJ%P\Op4e<g@N?'aUuQi\rq`58AkF:gfaKK]/Cm*J6R-l!rp[kpA0OMmT;Vk_(n:n6b%%UA_8t>%GhsR'Vb;U0qe7.4XQ38hpt,i#"]<H4,WWVO.OP_:u&T0"2g`4s*mc!'s<sRQ^`$*JW$?:YQ_D+HU'd)@&""f2U+BUfn@D%3aAY_Bj4M]3CDu@#Q-C4e-Q9'Ohk73U*aPbK9uhWCfTGp$76L.q12m2dffsk`dCV`VbXJM-TMqZO=XWL-[+[?G^bA!,A%K:$j2=0%ADC&&H%q`<\@E:RM_\+]3i_6'Cl7M_^p#kDfmmgVk'>.;8\hqo?qQ=I!a(\<\8`Zq%]dVO_s5/;[V+4I#*il-=P>ZHq3G.B"!`2V%W<l]?#7RXDnB&NQ-grZuM%>R78KOpo-#p`)qMjnX1JHrM0['l9Te_SN"4juc7=gL"=H!6"Z>cI94Vel6^R;SnbZgH5Zr397)KfC$%>7QQ8Mu*PYPNp0(r46B>4]h`$NicmOOH=(]9\i%229/+[#;m_^9Wf9gP-'l7#0npH#HgRIYT,`4lS&e.ljS$0DI]gjX?\IP(r`WZ%:l1!,BHo/]Vda<I_bacW&kMX%<@&ap2>.S<#2L6&L.H_"#^.)Y(6f0rpKJOYF6MV.D*EPRTiO*GN7:b&.E8?$9.g2[,=&Vu0dfnS%_$!,@NG,6gB4RfLR/IF@&5k^mX:\)^VWj5c+bDur+c'W+MPK3M7Xd%CBFJt3mpk:r86^s+/CJZ"d@Vq^1ekNP/?OP9oTrH=B-ADN%!0WY?jK#+L)m$!49F'?pP:K<\_fPp3Q;l;!3`pu]`O=1:LXeabK8"5_Lk-M^%.eEd"UpU[D1d#()<TnFGZk0"M?:@.5mfR4@@^u<%m6j2DVAWO2WXmV,^8GG#6_Osn-89q1cnLgi_0R"ajrfr;dhJW+Lk\)5-X@I@%,,()e7?Npe4;=LT;N5uck^4ME;kMRda"R>Q_FpL%-K?.6,SEHe-Ck4]&2D47[c"o4$BXC`rfCe3+ZhB$JYaeM"ZOhN)HH9^Qskb(KP1C5*S`?45n]25d'?)?b91^.djrdq_`fs4#MD)8%HmEO^hF$j53rXh#60GWeA>0[O.5?4\;/))R(pA!"(n$<]*bK?sB&Tnd)$NS;LVSEogl?G,RJLk>3M]&kg56d,&KW_QPJs=2(cHr\%<u)Nf+>4Q?<EQVsWB+M:0\j)Q"j'P>23BdA)RP<AF>?VV[=A+/-%O!iIj:8.1]i:I(n*hS*LJ`5%WtD-!8l;#/M_tK/Lo!L.T#IP%L2>9@bb?p@#<,XC%$UBak&1@%\t9>0E]0p70sO\M\5^8Td4+bl&qF+=*,&hS%ZNAl1kQX*Fq+<4"63=T_1AI@>nr3#?o9tb*FSl3%YV@iLMi;"l*0#J,T!osA(X6`eP_FmP(eK6M.<'AKcc!V`B(I>uAX\s-BLe;_`aM!W*4:GH6IiO&@m;\8I?2a[]4+_D#M$%LMdX3H%d3uI>J;j"(#7NgH7iZsdpX5uq<$e>Y-s)6U!_.OVQGB!;:-#*91/U3u#iej\VFQ2dmg1c6T8aJ&M\8NZhMi!<4OIZT\2-VV(+#WU%@Ut\B/#XHnP:DL8C<A*em:&27G@ofui8k-H-in2?n`L>d[GtXmjTPR158+`)XL!R*)rq51H?BNrP_$J325$>42AV*`NG/Dn6XcKj%C.OXS%#At$+=*X%$OfiR,:;$5&"qYsb$`-k6J!YYM$H4DMb?(-gfQ\F+97!n@]<U5<'9?:LTh]@C^8LA)T"2]d,<)-dYK@P'#`dF%H"g"TC8dN17KN3D@)!-SC7'^-m\^I]WsPXZNhMG8G?hU\Qi`,$B-JTK5UDgT*uL\Qe+qtA@N<!tG)$OuoMrV]@b_kBI2EIs%ftXH%l(IhB;n3+8@Qa5,d\``nik5D\iq<m6A$E7[^5t&%;N%rmDJE7r&\J<^5_Tdk,Jr;g1`^XDR05&2@j=%**UnW[%Q%@R2Q6cdF?4X[%K((b"7X;BS&1#0Q3AELBAEMkc<(t$SKdASY'5F(%TSf)0W-po7P>[C)KH[FVM?4ke6@;=a,hga!\QG!VLIN/p5ugTs8"2#F5D0;!%TWnLZP?X!_CeQenJ4?s^ihKpi$UN"1>]g$,[-r`/^sXQ;\e')t'W1@5^Etuc^gdNCmDI)K7j1(F".7$6&-bT.eYH_3b4ip28g7O"%Nr\8eM==sOoSPr6OC;EWPoP_imm.#/Cm0B_mAcUW"oq#g:EkCRn4Vf1=Fu63Q[mEm.[go5h$3gE''kb?6ZV`+n:AQgBlW0[;5c%]%"kGYIN_8V\#Ql,]4Msr!@_+',mKd9j%oRAA*L8.uVO'TA6ij7O,\LOG:rF+S0ME]YJ47&*/0P]cXGA<UB_ES\g]ib\)44dPEPkIE%$&%8;9`</ZaZrT;NXdVHQ9#GOiL(q)MFa;V!\qf%ZNl#H"%rZG'H1>iFoZ%^5ruN_#XX.t`),&r+E%eO8*-"QbZ.1$.HEK5aMdZ^%!7;YP'^$m@NtUXO3BiF?^9FQ+@q_U6C19XmNhUDH$%u<$bYYbnj`"Y7r#SPu'I*[JBHOIT>]`(6A+5&f&2.A9JG4JZS=t23#$4h3%KW,27.@Leb%`X#Q$Bl"])f,uUpIU0_FLc+FL]GQ]5`j,ad8250oI5B6ND@"BE2*/-U8m-nl5XKtI5)"J<(E1ZF?EH0TS(-P:4TPu%\:5ir`X'aJ\>GXf2%>V6(jO>_N`9\:XAknj'EG(1hCi;M;(7,>;*kUh6<=@'V7`N52":9r9')F+Vk?l[F<c[G!-(U?$sq';6G<W*%%Ib1C,R@h:(*uO:i6F=2U-fa4;#G-`:RRkr/9#Qid35=D!R>RQ\.L&KhHXXrYXnJH755nDS'BP6'-hKt5B*8im#W,>M0lIa4.)[G%mfT#G2LuuT/;SP]%&bR@a>*pT)%(@$J?$kp@R;e$@WWED:e]gGR07R*_(m*3+q-?V?;OD9qhZMVWHc?Llg#6Z)*5kQ,,\k,H'AFL%7&9CR4qQ6NSrKMrF9+/DDl$dN+om^YjZ1&P6+WN94&k*.!Y#_Z=1"o]PR7t7P0"5SalP?JM`-=eCil=BmM&c5WHn]XE3oZZ#"H#M%T2HeP#[hORr14Zd3mZj'rf.oWlQeKP37mC#&dC\m.[kYdLp7M/,hN=&L,tk/`03U+<t%^\V,/?9+9@TQNNDgbW8kE`<+Qh6mkep*%_)M!jFNhp0,nS\c]#!K%!,Jq_JF-afQ-ia=3;<A(6BI7#Bhea+1tNp:K:hh#]"ipu$8"sQ.R"-l$^(.6[5j)RTX)L:^PbDO&&4$:%"d;rRiFr7+pY^@0'Umc'SZK]g($JfOad0@ai#_s@e>86bWbMWso>i%8-;#hQJ4:I'?c\5c%YQ%="4=(J+gX&;QRGa,#:hDdfo1n^%OK_Leki4!Ik#3s)BlGq\oEk@k.:JO49\V6I+H[:5XD#3$#7?h0!pS(&R?CcA*;^9[TFur#1nC8h%E]hGS@kN&&1"MH#'0(+epJA?%BcVX[6!mg@<FlOKOO?:*&_Y%J.JJJtf`L8M>>a&\5n[BhTJ'MXA%p/XSVFG(Rgj%Kb2k1(2%LT5+]=pU0Yf8V/>-C$dQk7::SDUP%Tcn#:A.(u6U9Z(t!e`n50+Cfp^<B-]L9cO1.u"q(/YY[jaHcslHBj$_]<J\nL&kKXRV\Z49H-C*C`+G7>T+I^'+D:)Ce::]5RAjW%6#+W1)6)(][a89fak$o3$R`P(Of]0=0f9(<\:onG'F[eVaHlHIPV)+7Al_=.L_MEb>7j]IKFm??K@H>C1K(EMCuJ14X-Umg@RjF5%/HeYYb!:M`fNLPX!3O._e:qft>iY#fcO1r`n15AnHIOB:SN1f:LCYr]3>c$L-d7?+)F2B@^oV]AmLKk'V7fDJ%8-il!ooto\p/cd%BEsWG*gX^-#E0/=#-BUBZjgVhcloaC+45A:4NArPjWk07@$*46*.q.#K?@SH.QU"RD7h=uXEb]Ei/psl@Ln$?JPK@j+UgqBnYBjN%6bna"?M^CTA?(k"mPCPsWQuns[=eE3VMK?X&>n31+:!ln@#Te*-fVaq>B5$^*\[W;7>=hCM]rOh0"_N@A($hh=S*_g3$,Uj$0F%E%(]g(M-%qisHXM*$SldWTOT=M*jM;Nq+P%nlJ;*(]*Cu9"cm0rH'GF=_A9kKYh!7WXbahc_0+Z]Hd[mk!WHoC+oKbnPKW"`&`)NQ1%D1tjT@Or'$%l9C^>bk,(JTtYSk*b(N@0_OWL&a(nV9\q;`r^\=rBL@R.\Rk`-uWSo9O3D3*>k65il=oPFp#&n$)$4X+UCn9B,,6q%6pYnsb8r""K.^aU@,\6M\CG$J_35F0U-s1Fe?hb,]SVaGD;i<:b/WVbDm2mipFfC84i8guNgXThME]ng5j>V24rtH*6%[8-S.*?K%I?E@39PTMp%g4#Q#QZ,X"#4:*%D8cJ-X=Io's_T$E>"6$;c]'3?p+n$Z>nr'\G9NjQ;!&F7>[aL,6uOMg8<f/_m;QIgdeRX@_Z[I%l+qo7VLO8Qc4-G*@"&MK5%7qCL4D<k\f)H*7FP.e&lA.?HB9gNGPZt;"<t<OF5m1a8UGi0%i5Q[*J<BBdN#noa5M\Z]TeW]%$lL3%_'6r+`Xc[j`^RgSNWe@s;jeOQL9X4jC'bg]s0f[8Msk`1VuauHU'-,l8NpZ-_i%5WCRgk07QdYCMB="_nAe\l;dBQ+*KHK/B9.pq%4CT5]9UA#74YW%B?TF`gfGGsO8XrfNpq8;[qBM[(1LAJF_n]d+E0^PgT[7BR%F`QB=mP$,-\^tk$$D"+Zgm#Yg7+BX`rZK'&&[-e%=L9k$,J'sFmOWn1mJ:tc@"V`nG+Pl#;*gLu^7(h(.*L3hW9<AJ,%a78*8O5!R%^+h4.0p*OS+rt;,^g<qK`WM;`)650*`V-Os0-O%]PYlu=B*TI:uQ2/T]_[gm`c%1S-02\=9A>F%U7Bj>uGcd`>R,KRLX:8Ck$jW9nrkmC5p<AF@iJ%'M<AJ0dt";gAQ_c'HJOqC!;A_%3_])(q0[afK+VNA=,=Sb_lQ)GT4#C-_jds!c"'6Z)0F;KK45Cj3_&B&>#[g6TW]dEjCh"NT)]B994Li4US9cBBX2d_O<+fRf3p-4%;.],B;G_5Q&e)rlk.[Q[>/U4a<5#J:L()ZXfJ,LSWld.hTMS6)5d'LQ2,0FfSP&cpQDEp[2'o!apbbaNDBh2f:7A!HO<9p0klg*q%Y5.?Xibk^_Uf$X3?"<q,h$jj.T=WM@a=NO^%4VOo0&%'a@\Z^r,bV16_WC"ZmT-uf7oau[%D!G]JVp3^I6bA<7Ee@=0/Q'.peZDu%GRGC@/=j8*M+s!t3M(C4ZpRe9Wb<te/.0j73gm^1C%4!=.P)X<bm&^,iQiPMkAHE&M&!uFXKlfOO?ei1!PojS#pKj64.$s\-]n^K%p_$(^hAj%U@Zm*8(mqFA1>t&N%a@dO.!8gGn@1ApcJcej-'U.Ccg%DqU[3"oN45fj!pJkIk`KjTa(]eX,YeZb&0OL-,=H&$Ai#hd%"R<^0@p1ja-p,Nd_ka"(+pe#]l`-`-<X8_[(>&%-!.Lq>dsN35l48FcAk8]5;/qtup<ed$fg[%pZXW`0$UeDgWhji71WAbR*)f5"%6XMk]Sgjc!"P!7SPIqa2DAfH7!:4KbEYYh[\lt]Q[5n.i<!8!^Nt>dQ^)s$Mkle9nf7K;;IbMmu*FHqJI;97T"*?nd*pm5e\eELI%,nO+rq-rWOE[GN;2:<D)5o5GKHDM"mN!OSR^9Z_=,fgOk<7DUI;eTu^9T56k]/e@g;ha+=W1)VA.]c(&XA'nSn;CH56caof&1:F7%S7jo':E!GX@lf(EqYJ,m>LeVh((O>0^qc$AD#+%A;oEn](#LGD_$8l\[i+.Y@?r,=q5mFH"_8ah9qpkrOia=<:C1Rkc'WT1?N?n#%O[qNsJ/[<[$bHE:&6U@qU(Vus+jL)sDoe[%h\(mNNT6%ihgl1KM"'`=3&!V.(]aulJfY!i#C.+R>pZj4HD"3de[Fu*N$SLE?e#LN%@+29T":B)VJJ*tu&77<2/`NE28e9s7'Fpu?jlB8T0I.NXM9Rj`W8VU>!>h[>)&*Ku#a>Nq"q')$/clMR@jrP23:>W#Z#I@jf@G2p%aj`k1LpSH(0pEBM6k1rVfFXtdJf"QciP1OL>YcIBBA9[[5i(S#jQI48K1B2NYS[DhV@3]aeRO.roc(Jg2Ja;`):e">f*=dl`V%[b%L=Kdb61p^:(ZY@hDF`(`JAhd*\#/O@Aj_)7oc$C;Y@0mV."\T4N1u5%EDA`1EPSgTc(bXn^8(=q.tA4RnP2h$(fl\$#1[W3?$^dH%WDRbc?j'aD9DH<,H7UbKIcGW3i'jLI-2-7<('Y-21(5ga[i+"PMXU0\#S2.4r5qi9VlVg!KK$63M+`2_@6*gFFNOst>*D4/+0l0'%[.At]>hBs?2W2>A]`oUlQdj&./E`3.2E!hac!KC[m9;'r9TSYH.!-XBM6_AX\dp>]J9WCS'<G^]p7p>04_(qY\VV-'7sRiPIN*/H%YXU/U=c,LV#sl<6$,ePI`R43706(rM%rKso9)%ig#>D6SLKuKN2jZL/!MsMA_uVOa)u:&tlk5)gGE6Ct?AE=_S5\F4:7(H+]Qmk^%j5),#:Q`3T"#1b<Td39aW-ER'UmD<S+iWEdKBNf:KXJ<BZkrsG&ZF*`5H#ZDRg(%[15-e"9j?d'eQ8k&J%cPH$:XCpLqu>+VU7IO%\0m%L`cP+4mWh9`C!kH9Qk-1d,F.2O(`8#DLI>/1ki5YGQmusHlbIp>b_\&rb$Y>k6r_]Zrlca]&i35?jA=2E6&%_\i99oC]UZaJ%@Z*>VHN'0OBqt$j'fngF\'#RJd,5>_n="*M+78&\288X6O)*+3',J./aCF&W7BRVT3<##u2=LH[&]]n?fYG:WBjI+R9SXdQLUs8.%Ql@_;]Q[$okATToU1ri3iAlp->kPjtfR`kaW^:?GkW1nm`)F]$[$9A7!th>BFR"E0<Q+&H0[F$K6rbp,q6NM74[5Ab%R56UO6YI0%h_r;XGWlCCqfM\k_+R+3Psb>SWW:Hurb.3^G;_/cA9bL(J+A82/`L8)VF-E*0Rgd8K5#)/iubk^71`M_cV7hkT</KFNu?_,jZks9%"IV.Ch4#gc.aPC*TYiF'6p\h:V!(Mnh%-7DGQseYfJ/*(=uq-m`1d?8,%4$i'OQrE+ikQChk3?!2UCU(bppaL7g0?NXq-r%EiIIV%D(+;?jgf\^%REcmBup.*2@r[ng,k$+&tM8LKnHNW,2J.ejR?;_#\P'bg$/JEjI%07h\7'2iBWVGMts>"iafnkk6YT$f+Mp_+%e2a%d)03QL4hhG;@S-ZifF'MLcHGCch2;icP+:\Xt;\V5`ZS9W_@'B$NjmD,EQB_Big$B'<%di7`2OMkU<;fZH7'\^uc'70Y*+;f!bOA%4+f@M:-=Eki8Y%hIng2<gLe;[B,2q1'rFr,(!l1gLnZf?"'+FaKl?ZE6K;2a^Gl=\54*NW`kc/8@T?9M+rs.m`>Tr1LPZjiO<0XO%,.o1b?Tl?REG59'+g)XdA`G7bn#]^%'MVO1)T@S%\+0'b[PYb`jYWk+UQXj8:s(l*R@YDME=X0I\2!#l_[h=f*de9U,g+L/l6B`3%frFLai;B:D\q][W_oQeR!jg2Bb:.NG"[Sq&;1&fEl_uAi6&d!]ebL(XHmt7]#O9_kplSC!aP>oC]![A)b)-U.RnlK;W$>@)$4>[r%0XuMar-94_=aj'MpW_nEOiA+C=9KO@`HX-*SFJ&D`.0</iX@P,=88!mVl6<l(1HD$2r_%=+p;BB0O*V]_#-"-6"9rVHgN.OUF!5=%JDp;$$'J`_[LD/:cdANL0LsWu%(WbWjS)iHPC[fX'A)!52&k$h]dX]il@\kj'%dBL,f9K1#&,(j)!JT7XRGQi*<j@,L;A(0pn\6G%ZSVtjP^s\0Z.L0q6c5$OoLKoR,7^k3"QHnLj0S$\?S-qf3<Da@\pU7$-6D;PlP^"2->iJ0Ua*Ahl<mgU!bc<'oY<O#Jpqj^0*oD[%"\?0;hsb@UU-s#A/>RMuHZ/[b'R`*?A744XVi+RehE6_JD_W,c2pYqS.mF_"J9Z@9_a/Nq;EotT&#Yuh!(`UQI*Z,N@@.Rh%tYj9%<TbJHP5p83O29Q1R#V;#dW:L.cPH#$.]0O3MVNmoig?BUkem0'IJiXc#>N5^Y`K207Shjh1RH>F7[h:lq8rC=:i9%*9E=l'_1ni1%5_d;f"$U-(1;p(6KEZ0F7Y#`^++Anad!L-s@a\Wl:bEq-!a(DFPq-.U'e=%o9VH3:;,I^OOTEJfdg&@u#L`4<(;EZJn!4q'Pkg:l%%uQBVJ4""b.>Au._+7IXX+iM6c95Eo,/Bo]`8ja@ePW=e#7E'>oY"YB^6ldC^__mM2^9D71P?FBU="Y.Q:C+-(^q]n%O&?Ro-Hd/%dN&]b$3SG2YeV)=>t(__r:NS]_2=I!A4WP9'.l0^U7g@UoIuXWHq"S65(VBRk>6Ea+=KbZQmObHFtaG@"C51R-&sQ%L/0dM>:I?o%!ejU.5kO7P,OS<hoO'j'#/DO$1!e0"85fN8iIa`oHslf6;ojapPo_pfM/qh5:nb-FQ&Yj`$ruZM7:RrFA!h<^0$5nk]&jsdF)4d?%J-[oP-;Ihcr%Ucq?foT$fPta,E[:Ls<"jZmmb0G/:ktbVo_L>ShS;6H,sP_Va9u0tPf6@$,j8tmr8%i!$'d^XN"82m[OPmdb2:Xd%.uQ)KMU'jVMR^mI<\[MW7??[W4[V`S#'jh@EZfP&Bafk%1`cTc*jkH8j<]t%X4hrf)'K?ro^Nhbgl9>9kb98V%i(\U`o_)bhiRWM%CqS3B8]`)s2))p-X@a"bl].'Q9BUX,kRW;"3+uol!<f_[*IM;Hkc[Q:WZ#+Z'_Eq)*+IR;m5/s3/RIDq8Z6?J@0,Pr_/Jq\A_-"Q%SDi8N9j7l>*lq1BKc2f[2u^b,6a&+=9e;=L@6BY>1VhO=V<go5hA*a]+jP>3&5%i&UP]IYVs/bJ9Q>3nG)CuVg,XIJ<u&j_oD]g0%g9g,M`b^Tp&;A>@0QihZ9,qgJfJKI;iiC*:)+'iBKVfqVkWZ$a_P&d4psc)d6:2Yoc1m3+&3S6K=ZeVD-SW:K8&L]>QTG@L1_HDM%(V_hR&Dc7F,YJpTCGN2bE$d)/g`U014OF1"L&#p8W,tlU3\u0)_R\;`Ac3GRBi=rC0QI@4(2@d#`C[H_+NbQM(,;,"OU9XKo^XcT%Vg/!umeE@_+)stZ1UWGMYq]h/Lf?c`alLnZBd<?a'209T\VP<G"p[3!.Nlg+l\0&E@G$Q-Pb7kT`@48oZ1-O.HK:MZjbc>&$j]!i%9t/KrgHFO/)K5]h64kQ&Z_#PhUSrQ^*m('oLuV.,_&RG(LS7oLAS-iN=<5<#3.VqB>!d/\3aGl]]$V9<a_W"oATSlS-&.bKeC);u%68rZODD.R^i(l5rGW2+hMV#?Q_[uRRR#\\<'G[Jg0!%?ge:3<X(ao_T;M$$DNYt[Q%q[ib`"U"p3['](H85dQh:2B8!^"2p=-7?K%+UYppK6Q23]WoST<[eEJ)sEYhkr[d[/kfihCI\u2U<kK&BVa:L'*2h2P3GkEDX^kPkrh13XRMlH!&_`>k(?D_SQE`TkTh5ZR_qIR%Q/]W5r]X.UWJZdAe)hPYiru.^\g%bp\7k+nGJQ%d.MIl<W(mJK8as;9<TPE>RUeS>HVhd6@7/b_'u25M)eX_(aA'mK`J):i=+fEk%'V6q8:Lo=<"e19$B`6?C7N@qEGT%7?16%n",!7^]3g,,^>+&hFC_O"7`ai8BZc(c^@cUeXVV*oa0hoM="0KA[1p`RaBd@f@J<%1g%/]FKD&Ikq*B&oWFXq&&.r7tT#U]UoeYUBVD3]kK9Q>4IV_TH+d@d]r,RkPj((P'e)S?5cI#8Ukn?=(Vj%Vs,$_TL!K'Sl5[on#Nn%a!Hmsi3i=k<Z^0$W]AI08?rc=(*CE9j2:7cIs=tg]c+I1)=7gC,u(/Hp#m01Hk2UZZQtgS$^\D`'2s<mVT-I[,6QCLYC#*NnE83g%7;^#@BRrpP?iF`K%($b3XDH<>+!#:WU'tRk7IckA"fOiX+bQ=t8'57*MiRUdNQE=.Zns-22,n%bR?Cb&k\WPp;ZYk'I<3ni636pk%9*8^bc62E4'%gHD9)CX^QQe[i(`bN.>NGtX_'IJ=3^PC($1HWBUo0;K%W8(F&N7b(J5$%u,VEcTk<R[6aJKNXTN"0Ad*s23=5ssc%d\*oS17r*Mi"KE8(M/fm-[SI%6JIA^E#+bW4WZE%F;a/G.0PC4"g%q:#We7'jJ*J)$IB;f)B^i%9@:Wgs"^h\HWS;3_YYu[*ZWSk%8PKMG#LG$57*hTso,S^#BrNS3,Jf/_3u[;q"teg$s5Lm$hOOY2kfsU%d6lrgN/kGqigk&m?[P?Imq=%tMd.K&#XJk@-![.q-:Een%'rS>dcN$a#ipD*R1"1heOo@@kT2G\QX@[!m&To9"&*PI."HeKL@A!`sK:d_R%H/P``3tc<!`C3f*HJ]B;RBM\e3Q_c*hkq+AXBQ%%BYEplCq>Trh$en7%R2MC@o`ph%.qP&#&/U3-5rE5cj^EQ%<(DQ&rqea/"VD-Do(CJ#psBj+'+V739tB4!lGQck+OK?Iad:-ZZ(+P%_F0=>G`"7ddQ-3XP`@q\7T<PrAdnZ0gBts&pphmXOmQoLr*g(f3'(>WO,c1A$O,Qc#f+%\F&Ydu&lrh5&%YH$@(_lCn*2532:+9I%#UW1WKKMmHha,lX3@m!.FL6X:HosdT=3IQ'WS;)p7-PEtEKZ4)6\_FV0EgPiHr2hUq#&C]8[/6Pgpc\)Q!Dph!WR^(!fR-8>'7#H%T'QOa(3&1WMLdkobY^lFK^:U#Z46h^eehmteQdIidnLl\7f&t'_,[nDB&2W]bTrJ0ZQHA@=PgU_53MY:TDjG!""eL]f@uC\pRF42%\'298Lo`DXY*"FG3Wr*j93JVV`',CcH.<%h,d;O]hj_[p<VPPlh-V=F99$Z_NU5P,fP8s:BsmlAInQcG>68Q[3dX%M<"m.p',s]c%S%a3aFaRZ>W!knH>nJulRt_c3%Ue6\c*P-ae:ROc(?.Ei0Pf1<BXR`?GH\?FrC(N`87NK@\SOCL?]"IBp72BSl&MZo8j:*W;C.'e%KlnA^3)HVP6@[GrTa]cXA.gr5lf6Z$B\l'9.P3]g\]cCO):Re>e<r0/o4k]UG(>U:BD9L$nFWB?5A.<Jo.hlKrL:hu\B8f$><iRK%Ro\Ge*Uk!!>`5<4bW[66/1NH!I=665UX$)\/=&uG_J9]H*$*=4oML:D.oK0cQjKV3Y.QtaN,Y8>Fo\m`9X<%sZ,C3&(2Lh@ddrDl%mOR_X6)R"<XR8R5J8B$tSh7iMfZt'J2pq-g2e)i32;&X(4XnH,;4./Q%Bo7D"Z!l,rsd`gTkgW(o.i-?\UgH:_=B4B0&XNn"(hT[%=BBetkeW\Ill<D_#Lt&Vk3OWKa&Ms:_rb>]U9udtJlapL_'#"@e_)jlmU$E.+g;2.'&[1N,cJknQ-q:(ho42MAAQ&d7f>F^=V<VL%SBk<R:h3_/c$&er8.Gp*LE4!)P9'j,=::K?bn;>?P4ZVrT[FBs[1gLh%o,5=TqI/?/?Qm5_`FW7+Fm9t:NR98*4Ku!_bZG5'9EnX%!XUNdNV+Xh#)J:LV#;J@L`@X,\sbq8kPP/%I3m"+qtX<lj_O9o]Md,`(^+9o"Fm/!!\L(4WN@p%=D5ne_3'C_L"eEOH[Vbckt6R!%TZUV4i:*%Ue#--Dbm.B,5LJaN8GkG%E]](C"BH9T*Cs)FgbGVXl*B4>aYai)1=<0BQME2Lr/+a]Ls"6e'g,buegaL_4F8FiCdfG:%&\IOP40n4u.8tH-BJ)tP7aoct'ftUNXj<_\a(6YL\YekS<5<O^J2mYPiB#E!%n"9e8bTlNm_pR+H'@]Q7S/p.-3QGGY]T#8<UA42%n&.j2/4KKa\h#[oR%oED'YpQe&:0.UL$Ec[P:N6(8Wo%j>Z,u/i%r3Nm#b+S,@:RV$P#`EoP&Ce^_'GpO<3(sdH;6RJYg!qEs+qG%LA?!JX?0pI'ei8LnW5[:?;4leR\0_MQ00/a%I_Pi@"$"B$Eo[,C`Hs)^4ZNmnHXaTVZbQ/#.7d3%4r5pEE9kR'hCNW+k0:#8lQPA%:'qUNQ->4K[1d)&ikTaS'<I<LNg=8;T;T+2<q[HqOp/9-bn\l"&$9=sK@$+P":+jZadthkDGaUQM,^!Y5[\)ITqanand:\Y63Fq,%[cG5?7Df<YE=Bu],XL@tBQUM7#r1rdWauUT,Wkm2P<s_?0O@gMS^:Y/$,pkH#,^=R.pp@U3XL'UjiZ3'c*1MEs,/EBYH$]hGUjDA%IFIZeP][^bWseXfYY*5FgK!NScn>+tr^@hT'J=FI4VeR6a<4Pg`YLD9B9/T&WaWO+,A`YD7<R>EQ9f.>(bQCc(D\DGkTI%dZNhA\%8cuaWrXdl(^Hbo3.=J4n%FRq!HDcGXV)e&@!lA^*Ahs-ar#rS-s/a-[::BYh"MV+ek.scf@96DbK`dh.F'uecKdR8XA[(SlYeGt]%B0n7nP7/YJ=l43@k>ng%F--@cb<$6O/rEV"Y-nH)8)s0@#/.\@X]s]M5-3K+qYI3Ur(XI*9I`]!*s41%\Nhmi#'8(%34Zg)NJt6'%n>T6/;']Pm[;<_C'g;>`:.RMgq;sc/)`%qA_c)L8%q6f:l;i(>R.RGb`$/ST?GbXS87XVf^`IMi.@G&h'Q.,aOH&le1["$b=H>tV%,dp&bI4(5N;hTUf\.9iHj0'V7=_"*C3)TuU"m6P,**#`68bXW:o$6tuAlBSrK(i_bXP`I,KO3a#UP-qY]-L!;f%&*)$N)<`/kVd-%=!Rd:.hk""`Z:hAM\#Iuhr(VahXU/`F._ZrY1tqR+>"'8L98c5#"Xe5<#1SUj+0V4R]mYU7sAEs>:A"h@,qKqGTOZkd6"T!3MW6.%B;c6o=r>Ba[97"rZJEP-]dWf]ZMEfJUgBdM'X\*VjATfcY$Ya0;)lp4UYn]QhrUe500&6Q"r#BLXidiD<sH"m-?g]l'SB`%C,s<"%.pSWU`AZ`@#82;1lj"e>Nt)phIu6s)>RWj1__k9QB6]QeD&?+Q8VZ@a8RHH6lf'*U`],8']ru?XkrW-$3BdW=SMa1]?oigG/k*D8%iA?_dGsQ<Y"skrc+_ZO$k37.ui>XPtic-&^WBBq;S-.:BkIH#T$#RQi_7JB_q8$ZKmUC^%)^t[''HW>=hUVEJB0GZhZ.g=g0knoV%Jb;UHn%#VJqILf%6_oQ0>,W^TE5i=kSHD@FY.@ua8pG2KUO)=@ZF*d!mAYmYh-meo.TdA*\SD2EEFsKWM;52q<N^)Ee;f*`mi21M%Os.IJ2tG;J^0MT(MGmID^/.=PpmW^ipn!107ljua%<%Tt+&Ur'nau5jH[aS>H=?Fp2#-RhCSZPjm6MP3BF("fO4s$=/4M>N"\*C%%jWaEUNa,dEf6PB"n6XTt&HC."8A][sM@,s0HH2f(0OR52BkQbBU`q+=eO)QU$D4>>MhAUB'gE1P"#D$[Xf`<M9:8AUOAn.b4)bR*%s#&HeJgI7kCOJQp@Q-==4i8FYH3)JEE+09#Lh&[6aP"bQYD*I>+[\&.n@f9i2A0\t"(NNWl;753n<h@=jpjRDOW.Zdpc1;[G+9sC%JY6UF_O(/=^u<Bi=dSB)$_ck6KiD$]J2@nCAg'[;W=<!`Me4`)OpDqqa(!Fd)*3b(Bg+\AnD!l:#5p7BMTVGXT7@r&`0_Bh^A.g3%&tp%nGIO005VOiuO<bu>hX)46%m;[J7PBKA>X-$@W+-9o69T;n<Y1mq=B5/23GGOn6"oGTL+JU7/SBgZSX8&N0Ma*gb6KKR8NCaI%*5BO->2G!"B#?Ma6N[1d?]a_!.4N.pD_&nI#Lf!mk)gUI(rr<M9g\%&Vj7Y7Z0Vt+hBGGm[!ZoT_%4s&$b`/\SC+>ZldnGBgo0@&%@1.`PU[2HE2YY%jrM&oiN=%?F/<d.Uku!(d)A09WG"!SQY\XI#&)oaRiL*,DH2+Q6R^!(jDYWB-`kV.T4WCu\_p:*7j=j70S[Mp]%32]!*>tgFb+R5eS0bDT7_]Eu-]2%EpDIJ>G+MJT502[rl\@g0$IZH5<9+udY`.j?UB`Aa&>B*W6pJL&r&Pk@ZD>6<!%7LETfRL_!%ba.f0a!9NDPI%okW0p$7"_'FrU._j:RM:CappGYf6<2Y;L-TnGHk&47(mq83Jbo,.,><:5#:I1hrQ#U.(^cq]j@d3Z(=95e.&,ap%%+C`>YoGYC"m;?.Q>Aqj>]Vn9Cn_r;a'B^n`ki;6\0gK\p^(n(-2mtTeLs]O%r-4@&I,FqEIbKga2J0kkPUN?c7QVjF&?K:R%[#O%QM+i!dou2GS2cSOT[%!'a4!+n&fjL0Yp1qp!863arL4Vubj9?B(rI00YA*$"5Ck=TP8EY)$4]+oiS?)?Iq@!$SDC2R[VeEtLA*+<%IttL":"GC1D6er<OJcdU"X:+^1W/d`/OP*<0#'H@V`bM'!h1#N6lhMj-0HmFX*;p.L'OikX01!LgMu-("4)Tb3I*)<;;>0,IB[8f%MXZZ&#J%!<"[UW8d&23L0Y5ZSN1@C#A8m<U7!,saO33@tk#b>uLk\\,g5$,&Yam7MRr,qK`H8I$*=.8)Zik?0+4`_Q:^\hY;V1ZG%1*ck_E356Wi9?dS5m,+%E?=TJ9/&bERh)OV+b&-]d$j8M>?uH:F`j:tnoXibhbcbhSK)WJ,KYKQGGA3q%gn>Z>alfrA6cLbW=ACH%UD`WJr2*hkE"Q07A/dtWTrT`_nHqI,&D$]OaS&p;+h3I14B^U/2B#Xuc<7)>UA,ppqH8Y/-MZpn,aC9,(Ol_Yih+%'q5#H)_<]]P%=JI.4"WN*r!#`jdmE0fX0m>R@)5-X3I'uc5L"s1d8?]>56gP=rcE;"Op8][S_#oIHY:\e*OtOLa&;oo,Xm^YXXL>aTrXrl)RtV0V%.]gW+@Ic-OWY["SD]j/Sh3u\ZR/=KAUg;`0lrPjW7']OYU96CZEalZYW^.G0mdG<@<c*&/rS#,)]USHE?LY=W/.pKZA-YS%dDr41%AX^RI6'XLLB]_Qb*K#_XD9u?-L3WZo!@YtoXl;P`aQA^?2/UG5iW=>I<b8oA\)$tM*6WhGd)T@G!o2-pYN*V(q&YDM%^Rg!>gY_s%Hb:LL)$`nCmb4P*pQ)o%^kJXT58`;n]8jisge^[\O2S&4\,NOsJ$ku[[9LAa:m@'@?1/F08E(fjl!8n@=UklS4R\LPae^HT#prK>%%I0u=,*:(fkTNl>4h]V.?jcDKl4sSr[Xm/p&&9.Tm(iMSNes9K_7qJI^YQ,,@Z?H2<>$pVh7i/E]c^/=dun^e:4\sCm@*P@.RNLr%%!cmaR2Gd!kR"]?A\<cN^VGX/#FH'!dDV?XShD59<9(WC>31;^\&1jN5u3iP1_B1o8<_9lngY'uB;&pRrIBOoY\as$<Lqa7.nBgO%TUrJUoI*+,>s+:*?5.-Uj6_'h[PeX*GtgBI$-Ig?qVbVW4?mVEhTt\pAVkH@7%ALtk8#Cf-_99!2;@^^4QofQ@V#$*pJ;*m>lWp)%K/@UC7J-c(`E'#N[::C_4Rc=e850MNVi"&aQTUC0lmpW#&So;-]*hZEBtB`Gh?lO!mht-Jr5:3d5/<pa1>=VP+o))bS=H?sR?MDc%pJ7lq^RmJmD,)9tF_38A(uYs+/:NffkRB]h/=?j-#m,uqI[=Ha]0aOM82'DH+M%ba)g%]Qg\b'(ShBCd:iii\\R#V!=\-7(`.hMq%4D7IG[B5JF8`^`krhW<WkKA%iKEJEs8-;M:SlZhiK=7NG'G/dX'2I,E>nU9Lqk7.!AcuMGBL6Kp>n"r])djTRF=C3t#"BsPiSMj!%q0AJS_*t*AGO@TO)!/U]617O[4:7rqQs1Vk[eRNIBIJXsT0iPe9FJ36D^cdmmgu`1%l(N8oa`O:Hg1IPXU+O0Us\(G61oEE03C4'%64`Y3K:.M*4&Wof+aELE?oAg'!s+*2^C)_NGmMQ5dV<S06SrK3^0hg*p&+tbR4(JjR)kJ,nALnY%:d#7KZ^,<?b8h\L8T57>E+'F%J?r1Trn[6o\P7c#mnQLY_*gmO7.T9B"2WSsI9EBg@BT+O:7?hbSI1Y0YW5.d^pR`(*l($9IH@""HP=o\3-GK>-."&;g)T`QQ?!NY%akN><:AV*o:@_7A`!7=5q4:%k.X],^(APUE5)t1_R\k?C#F1KGb?H<O#bV'+a[ciPCW@D;9:'Dro\rQZ]ip;s8@?!S"8*`MRB+Xp%0Un"V;`NJqWY.1-+];*U,O([0=`Y"o:_70@=n9ZD+<k)ZV0[$JQiWPqFBA+B\b(10PeY_@P0ThZ[R+:KQn@b?_((qp"9IUV*=Vi[%O]NAr,0:Vh8u;$UKf9JN/RWltZq(:7FpWbY#R1gKS0\,E`1Bfgmih2+]Y(jca-"Pl?Q"H=nVGY4)FRp1-RKmC8C7DF*,4L8SP-hS%W$;#-jSU!kDMcjERY/1`3T[NP+G_G\s(BbP"DO,sYeu%76ZBOs7.FY2'1-C`CErLZFCGp48'"Wg9>#oDiKlj?)6>\A_h$Ruf[BY=%);Fc"dPMg1!pqfX#@o<TK'C_O+K!5?Lq=QiHe8/C3=+n'WU6)mR$"?Jj1:-\,U=I[Er<mI-n%2-K%,TPdYK-Dg)W21k*)"::AJ@?%!>;<KBkIS^81"hmH]m:"Y[Cj,2e)j/DS]8eh"VO&SST`W9L-N,4]0WP1Bk@^2t3ab#3LAjHmIAu^dOHP@Bh5O0VHiA2b5I8VAu#a%!KB)$e1?866GKV1IZ=Q"Jm>UP0bE9pMoOk1gr;cb"\0ICc/=E=Z`-m=?![[H8S*1*!n^&85cNeH$E3$54'X_^\n3J@("QiWcGb$R%i#"8&NCk>*6=TdsI[G-RYI7PN9)mG=-J!$)1SU\,I?ZaO1(>3:";Dd/ai>=DT3,DG)q6ASlYG6b+a#+*_N%pC5tS_T?a@cglHdS-%KtS6^1kN\SN`_Q89C%!M8@N\YKk6S!<uHI#dFZ=]0jZb.Ap@CMB%!:C9^l:Of)>^e/e>e(*Q!.RRKQ'[%fK,T8^6t,''bHuCTm8?%$uX)MB6Ql?H)'=15LbeOT\/4DfLGWPm>bQ*b%Q^U1eU?<l:UkQNdDFd-DhaQ`0+fRJAA4qg`ZEcS'D1!BZK!fA[iljZ/7@ul-_6f%T=%Ollp:%o;;]V?\3RA@(JrA![EUnkMrPO*jI^_&]chb9HK0ImR2"Z9.]J->nuWsdP%b?d@E?S'"/prhH0C8^@p[<5Z;N+,"6($2%Wc_Wm8]o3^N_\eOI6s@W#R"YB"HN;j7@`8Os%tumQ1okAj/E>2&oiO#Vi05rhL7@pE,&B&F"CH6Db=i:"<e-`9.J@"fj-(Q5L>6<%Dc%bujkc:T+![J<P8]OB+p^%<[g'p$pa2fj:2i0(p#4-SJLBrW!oPiU8tO>#LkJ[.FZ)XVC@S^:5).0j1GEq,!X?2]WV.s1I3*ij%ciI\^hcURVEMGc:50D*"c)?D^l2PKp5W6.Uk'r*Z.:'ES;gcos+h.kg"i+nX]jgiO5bnU!0,S9VXJ!+tFZV'EdUoH^3[1\i+Argb%9"L=$GYKSt9p+?"1VoH(.mW_OD?V'_>>9V99-VM57oS9#$Bq1@?+VpEfR,^]/8Q>?MN8l*@q,[A'auf?<HePF](:6tD[MO`ldIL$%(e93oLqS5u):IIsG8,E%.bL:7]XOm2TVe*ED\#cu7$6e*"gI4dS)kk#pFr+9:^QbVB)2_Mf&0sQ;D@D.*,3+hR//LCq?6O!>'mP$%HLHYZ73@+jG$oPp-HX-g4PLB5Qh@3&f@OjlGFQr?n.He9`L+4M1[_+sTM7,!^RPn<XZE5)B!FG*Ib8Pd$E]ZiD0ZX1't@sp7>?/N%;+dSsX3s(<FQa0-Q!mWM9nYjNmSdL%4"M=>2RQPO@r+Z*D44oM[k;2R5WG%mK+]_J'E'Tcf`;(Cpd9nYpO)76_9F`Td7Tj,?]Rd"%(>!0[,f;8kHlHIoeHkU_c6FsgVQ%G"r'3F.E@A.MG$s.#$=%rrDV^H0"fcu]?I@L-HnKNq6H"gF5W`YG7^8[TcBfXY#!"=4EO;"^%JChSgbD:1U0nksZXE'lOL(ZK^fMK/U5KF[<N0q/R_Mu.Uko)l+;U#]pMo71i'H>&BfQM(]3R4hRbs4_&B5"bER!&n.OGBQpiS09]%P4L+kgJ1saPU+)DVLV1ZVO_a%<B-BO+d*GNI<4:Y6;pYb6X!DTfKcc2@l<pN8U6m,J"8]%UqVM[\?2Dp(&SA=OEYLP:o7r_LGW$<%TG6*P]IYoV%eFGfJM7<Pb'4lPQ=)#\07*g^i'6aBS4PUMGU@%JN3aY](_(]kdu7?fD$f`[_msf@=gVke__T8\T6gF/U6WZ8jOuc@%HC2Z=LaRasF6k]Y>>`EXN!>BcF\DdYRi0^8?c7%2cEGG2LP9`V-#5AiB&XK/@#J5+OQ5Q5[bIb7n@EZ;P#it5gSSb&<\ant8:[ut%pZ(3*#4LtlgDcdS15c>ubcsL01ph3pkM6F,$=8=gB!s`$*Zut@L<KiRR7/Uj3<VqdYiH(!(^)i76FNV3hP[%P(Nt[gO'2+Uei:--%SPng(edbf(7rq#.MXkhlhJY-6J5Ws'.Kh"U@i/V\c)5DgcQ7_V(IRb=c,.`o!<ek(6Ylk*j?j?g7E3/.>Oi>0AXVAA.dKUWC5V?0%").@C'%<&QZ]X[S8d`]PaKH&"p/iHNUkm\uK74>ns25Ncb`WLA+K+C8f91pA.Z<nr8CA$QeJ-W?#LMbf?Y'a<Wf9Bib8J\ngqu]H%6=nXLT._=$X99m)fj4\\EVS(P9(OcnkE^#JY4s4Q)f[(tKko+(ckUc\HjHl%^!7Gfempb&9L34AB8dq3#@UD@+Pm/%RGjQ6,a!m4%H3hXUF\4\+6n7BLI.(g&-Btbiqc>-J:.ogh.Da"$%W?8Hg$RKOjF26(X*)%_eVF%9/i"I!+DA<#1,8DD5'd=mH?*-IPKM*2)tIH?%+>r3#,-bncYO?=\$kfu2Gn1Gb4"u2fm]!W(\R41NC>H%0p#3WgT>ASCSdB*l*?GEP:@1$.:(T]iMc2+cinDlhL-U1Hi!/<u?1!(6%?_UnbQbG-O=(<f]g1q#-+pW6KNT:h<E%K,qK>Fmg-q+!k(`!<Ui"j7M]HlZT5)7)^=j%4b@[^]bg[$`mUl]7(NdSZjiVB>t@@i'H%&DmS168<kZf*Pq(#dBX,.YgmZ1ZD1A?WbufD,sWiJqWVCU^sI6250[D]S>@]h#3kl$W@3HLWoT)8fkMNXkEbT3lJR9--5uQC)pFC%R!E<<@F/":?2H[-9<);FL]LsGmk$OZ#hN1]!iAVMif<.di(4l&^C8^*)r_piVahD.h%#rkd-r;9,:#h>,BAAQ\KLEPfC.A^2?_^S%kL@9rY[iumG^AsUOg?f11.GEO+UBO74"&BD-Q")EJ5o=m.S.*GGGueG>M](rQjT1/L>%Ys`%Uqb+ru?ED?b;tA-5.`AX'bTOQ=AR%#0C"n^EnZ"`ITd^=/9fu<:3dg-=j<+$e#kmB.";P,Z@!d4DHE^2856DZ#=(e*'D$adj'"1>r+'AB$*Q)KOpq=Le:Vokf?N5:[\^N%DBtf:\4-mA-M]U&EP3Iof/HtC^A7>j\!'O-PAkK(3=tW*<Qon<d,;fs68#Tm*dZd'Fbg`NIts$[#ei2%frr-&F!(r=pe\TV&kG*2%oY3F1Ymah%ep"_:X1%o>IL]r;)n,A^QNe^cK/3B=`DVaW%:U-U$)52"IN'bSXaLn%JZB+^#hc,CE:m$3$>(DjEQn!R]-b+a"ISqu%rjal@Dp@PTX[Q)4k"o*e:JC<-ZD\EF_ulZjOfjkEcR26$fVcqe9%$2IHMJ&^NS6%n+`3kS[.i;Vhd9gT.$j$C,:gB]5SnfI>Mp15%d6M#,9*M5TE*-%dF*XJqbA`[sJ0%CAb)LL\MpYPeU%P0%[)PC-Eo-G:7j!Q]k5q11O=gb/K^A5Ne<4iTM:h.6TF>XYRqqXP.7>B)%*%`VQQ9;K82(8@&#\'^mCEgGYfn^&KNL??g<s^n6%b4OPZ.T-K)9>pg0TZh+:-E)R'K.D5Tq'r@*2:l,@dbM3]C6DsG0lCQ-3`0>%/S+n:`iMn]imX(!4*N4!Y<,j^"tE4QL)W\ui=T=$K#:su&!k<iaRPfPVj7+h5aDH-4q9\iPUgNt#E+`X&?aaV^fS)tK1(2t&"WA2%Jq0%b<oHX1+\[^2KJ:4Dg4d<aXe"$?38lQDLMJP<F1/NF,F`_AT8OAqLBmAs]"/lgJ(&tTD.Ej1f8e]ZpZi;283&bWhI1"BlOg'(%BP*Z/c\`#T?T]S7]caYl_+]+#&$dEW`GhI-Z>";SW[&Jfa95%c1Vbl[^ELd&@(cllSdRe[RdB_e!X$SJRKkG#*NAC2D*o.P+[[]]%@qE_uF5SLqalq8[*=LN71SN>7Wlf^MDFO<BaLkfHbW&0UN,'&A%dkk&Nj1m,%1@6b0l85/,)$.rS?68]_!AOnWVs!:YKaYn>On`7%%iY#C_%40OZV>mSm'fq^#i`6+Q&%@$PL(])9f-_fR?U3@;BLZ+d6oCiZE2&R;CQ^`8B;1'W=?PEo1PItg^cPad_d/QfVF:^s4Jat%!nZ\+R(m&U@q%fY?o1"Z*=0rE-3iMGE'I0]P_3f+aKU=l@R2Yp?k"#0p32L7g?NHpOSu2Hj:0<er:L!FeV8/?]]8coSWN8Hf"1P1%m_c'l^99c54hj^[SP#!"PU8pKC]*WnGWN\($OH.KGsV5h6/:!uqI0AT536,2S_S!;\_hr[.@-@`@&WR4iVEl4BPYc6URo,u'DqGU%r;Cm?led-biT'gMq=+?$Ie12??N0l]LHg1amPhoV>Pq:>13bDqS*T)Fs5CTYs7"&nlc['=m196niT'[IGNuZ,YCH<,^\mTuo,mtr%huENM>>VTVg@4ap:Hs7$e*fKurqh3@dr0\V]^7Y<0DQ&m:r)uiT-U%-,cO=\s6JSAnE7E%J,@.XJ,]Gba8c,l++F7=LEA]a9_sT=%#JR!.d=17ss7`.7r:hpprpFi=p"".1K>76&++O.ZiT'*DbK<5_R&/C]fDkdJpOE2&)_-ne&bI(@pV6^>++JY\if?=<r83#$r_KsP%rj+e5rr-9>q]C=cJF`a-_bV@<rQ0Na;Y]DK?($3;nAF]ZIeV;UIe`P-[8n='9^prk<c#O)'S$UHSJcjL)lu`B8?E91l5$>j5NfZ,%J'$c"EIK9PNe9mi9MN>-i@^7)2PH*rA`A/hYKZLm[DS(RhdF?p)hgm>qiW3/eQ5fK"j'>Y/Sm?=q#\i:mJ9o9n)_"E9d!tP,)@So%]$eAinC`F3IOC<%.fBY-KthdZ*4#pu&Lrt>=6_J!QUNs#9JFgTMOE?&AKXPAaCf,lH5(,<jaRGZ&*W\'d'Kl^!VmEdl@Fu^*#Ghc%o;d&ee-L[@T?O/;"Yn&B5Wu-#<6SMDL'\M#4n.6[8P0B)WiseG0m0p?#%gA,T(UcA5k2@+$FPFrFa*hAZL%-(RUURiG`HG/dY&+B%h+7HUAG07YQCq^4Q;;rPiF^Z:R"Y88HKNDX\h3gqB6rbf"tsd_/7>*C.TY$`PU*Z=:rtI1#h>$\VT3A:+?C&GW$eS*,8VA<<FikQ%+;i`_H6OMU>s@utDR#<aD8L6'R']-tgcY@oo\*17ZE#ZM_NfZViBYcV0nkB,fpgET]J+JT&77I"DW5r]I?[Z%&QE2]![-SP%+W^F%o+Qfg-e'8Z)8m<PRIe"TQ<5$K)>#n?r>MJrJ.@\n-2;GL-)_F@'N9V_MA`!.cmfgco@[6/)Md7.Bng-%'TdAK[i=P(IU\S,[e&_1%rs#K]8@+n9>Mq!O27-QrKi(fHl^;H_70#;Yn55jKQC"]J?#3i?Lgg[4*hHhjTmoZPQN?sX:2Y#6mr>-5\>S<j)pj\-R%#N0a?YfU%R;sE%c"3V7gEoP74VnL#iV]37FlZ<kZhku`Ta3SFF+LchK=9e+(3Hl:IXr[.Z]4[OhI6c>;#3ZV5FbGW9EQKO&f?C".3_AZp=oX(%#W-BGA@>;c.8Vc%;T9a[i1,<+IFVaJM=n]HkuBL8("<KM'9n%1=&h70!\D3@e]!QHrHlNi<^cb2PSZjWPCfRXeKN-1%S<tA<M48h%C*S=#ie:N4%oGAXL,3DL%DjV2>a&j4Li@^@1M-iopOIk:Vr?7SkZJ@'b#LUQ$*ggR"\WH*ef\W4-+]tVL[+en,uGU<CPVqHNs&sh%@:_=Xlqir`okJF_1/R=tTg"tth2C29_&VIE8.+5p_auX,d@:k1FKnOM.=5kp^9a3Xb8;G2QCJK:8-cA]VX#L)b(K"*;93gg9J;L\%P]iIJ7O#;hlO07TZKM=*<duB<Nj[836mUa2fHa*Yk+M$dpn`-,g"qn]bof#,@e\jI%k^IZfs(6%Ce!3MEBSh8WD`0oG$8G?_X.Fc%0?`%`a8gPQee8W5BB;!m@V8^!(%.I\X!II&6W!.P_+H+7RO)m0$LEi3&1uOOcT_Pcs*l;HA1&bgM+-Ja-:'7I$r3UKURg<3!/:^Z%Cp^,KDD:8tR/j`?""V3H7s$E#0+OF3QuWs(IUrMPb)Jtl>+gdDAuB]B8m"[M;.Sl3350qHRf55Y3B"Jh(jZe#3*,DgM%m6)X;2MG%Y)9BEi*hFR-t67S&W"S(/F;pt@Z=<8#mOa&Za,9dR'X\e(j-R'(7dh_OVjY_pOM4g:C<IHW$!HV30KmDoh_AW5924Ke'\+^_SX=7%]dFbD:rf/h0-iZVJq)&"O2OSV<ko1b-$Co]$Z_g+YNkuAid8mtZHI;I@n33?]J0D"6I-T;1,,u$/-soB5[bkjn>r>I_8sFd?_?Q3%=6n6MoZV/37EgcpBXVPR4+[4V:\S^4:.!kI<n"m=cee.-HJ$U9L3@JN<1,J7l7da:M%)bgG2i`g]iuKknBBeYAAspi<eFGd$ZZ-U%C\HqrpjUU5dgZ@rF.Fq`jMbaf%!m(.ShYnA_$A=:piZ:Q=@1?I$h?[oaKR3MeO.Y(6KkSb7!?[BfIZlaRMcZ(N^qrD-J/too^&:-%Ug<O'p6D,XL']S[N8`UQCQKWY`pfeIpca4/_6;WbRRqSpNLZ)G,VlV3g'&Q`X5MTuQORJ]@b,?_S'#.W'c-N0Ya1N!mFdbQK^H'P%CMG%OOKf&&V''li@*]=(X]f9X@DC1;2]Y#]nicbPKR49$=SIL(NI??Q$(t4*$@L,70,?L![TM*CG6@U?gL\,B9>k2UO[)*T@s6(*%]RnuRln)1GJ0_BJs)LKV5dT'3..Xe,/QFH%HE9Y)H<9:UG`5-T@EtqIIk]\51FO]U:8$W(1PSqBfX3)'DTWf"8;1Ro2@#GG5[ATj%o_DBQn?]L^pJq4CqX(hIh^SY[a;`5I6?bH\R;n6de\UHE+p#8pf3lqf@Hk;j9)hETp$-XL2ucbM>!%i0LUqiF.\Vkd0B"$Rd$6.;%5-PI/9X.!@;HA4`/F]Imh^.eZB*s=j!t9gKNB1We:4qFmVT<:A7=pu)A@WC=5A8f<\PjWgAhrA>#$.g$,Yd`%RMuCB1/%dF'%(B0%TbhSRR"@F"9Hm53\\O=reqQSL4dk?L8;th&E;f4\iiPgI`ogl`<Cl%.eIlMA<;<V]?dqY,m)u(b_8##t1k^Y[r9+j1%j@d2P/oq9%f+lfZ&:eSS\rmq;QQ#,XdV9EL$"LXmE1mdN&fb5HN%N$[j^N%J#aK%nd$$q]2Vbe5CRqiB]B<pXh&Xht:V_"@aT>tKU_1RBK)&N0%EYqiq]dG9C#`:XjW+H,IBXL)05j;6gJQk6IG7(l0U`F'$KDnPP*>D!L@f&6^&F\BJ,m,./)upobo@5Ym.S(L&m=r\>,Jl)tR%[TE%X$rNb5gl;=A`ISA8FJ'\?kuRl-;?_3,Jf#>=Q*!TXu/ec;=R=m;8gpBJN"$c26cPO<(-4cL7dcj?tG@$#riKoO<#[G.'OaD8BDh;%UBAX&*J/\&=kOc7Q3&T]X!05.A-)C>L-594).ok)@WrZtL*I+.q$"#M36W<+C9l.?9Au4.I_Sk)aQa&3&u$Use7K"RPj5Jc@Y'92%M/c25p=016:58tW1;(93?jTs=>YP7QA0LYnL-59T)5]R'nbGC(Cop26Y4`64D/blMeCA*C\X14s'0X%^\I7ptoX5"6:66J72M^:r%B9+niLGMOp73=dqjO\NCA#<0'!5&jJ9s@.o_9lQHo*%fYj="u4IY=i??g-;@jnr]mAnWqQJ<3NR)W7E*%XTOg@s8b$:#!J%DP0V3%5`28F@V"nH<Is^1<QuU"noST50X4hrhQE#t&^JeUIR1%E(JIPG<R(Nu9&_@>/0nX9;8iQKE&,0TBGcL0T*aY+GS!\Jl<QeL+JHml%b*?sc="o0Majl-]XBD%kl@baVq^*`*Y4F3V'LpGJbEnj25dMmU:effSXcD41jn&0`J"_?Lb;Ec'Qs)-$Jq,,PT012:B6o1SYT1Jd%&$]:4q,*.Fc9BuJ[hM#:rQd4H&2m6ibm#[SPuR@;Z/Q;17m@9*1fuQMHsCu_&!mM3=NVHo8Q,V'gHk5H86`A5/a.mA[rWY(rJl^l%JC*QeU`Og(Wll_Z[Oc[--Q6G*OU?nI&ca4S$XP!bf8;2bK/^d$(>p+crNF*-23)'5eMr5N+qqZUJZN;%pN/_Tn!lf>G?\shSCB'r%gA?BpZ]u:%@@d\0b:kR\\nY/fXO<06#D7t>0%9,57\+2&qGa96Y1Hha;Dc:;F9+[.V(YV1*/\OM#s.P_nZ@L0>DLPI"\]3)ZJnU#%[+Q]9.A%_sL>!C7`=IllHjmTC^5G2Y><r8Nr#oYtg]DbM,UFg)>-s_UXYc0ni)F:qgBAcH3n%RI:]NR-,*A?A$5/Ol\Sfm5a@u[$%ipf0^MED7\8:pQU6[2-V+/9&Q?s`LH6_2oLJ7qjYAgKb!\UT't%QOrjD)#dA1VD#[JZK<<L<^.W!*Id4iLh"DK,T0dgiqr[JiR(5%>:R&%eWI,\8L\Yc3PG+8]"eg-%*"N!UVZYa"(lZ\_/USUHJa"P%k08A)'/5W4!1.C]0P?UAn^2"_kDV1BS"BVlkqR2+,Y$<4FEn.%-^,GNWS<1dkb,"RIe4)4;"@I9T-ZI:<C%'3PN\kMDGW[lg3KAr@BJ@7'YdD&?^nf%rWGKG/n':)H,Et(U";*^?K]<?"8d%D`k.cr%$'06PkDa%j&99..K?*nm,dKnTbQ#)tl+=M+13Lr][bqiPo*3qpR0`pUU)"`IKR:+ldVQAAUX8$*3jD@uE@RT5c`)kY*%1Xb0+a.f%[WOk^JKtnse:)tp(D-,MEJW_,(4#fZ/m+Xce17gJ8a3iQr%P.%8#/qYV0)Fe]'K@=g+j/d45aZgCns.kR1X4dJB[@G5kNdYb\>]f%&>_uk6V`fi*"a71^c$nGi/Fomk?J7OeHL7hlp4$48rf6(`$:s#B=.]!I`;!_TI3fkF1#.6Jrr,[(d6N)mF]8/,j<,AC7tEE&2%qC%/H>@fK4IGN*s1Y*e'EPY,fS(+i^](3'rmS&D1Om%mmX+j/2Rm2ICbQ(UXl%<=*%X2HORO!>dG6t_6+.V@0i-4/cZ@-bDPS]g$kjM%kBO?rQZm$?n5bK#hbBEK8[W1O=9MfpRjO>BI_('igB`c_ktLHATPqboe'E?6iDc!N?')k7aUi_=BQ2MA$`LPX<5N/1]\JJ3m,Cts%j743(0$j>D&et[$-+B^:&AtHq!LA9b?lY)8'F2Q9?U+i6:!na&_:9aZ'_I3q,4?.OmrZdi_;9FCFHB'c,pugVPJS]*DE.t7V^G!0%92F$^&/1Uqcj;/j2,iHK#8u+9dFq1dF`Xp]_AoA_E8Q6(C#8Y@%Q4ek[,!-rg*RufC`5<ur%LJkrVjWD=?AI5=Wq.Mai4Nf#MI^k%Cas3:4T>uglK'KkI<NAh`JM2m@9\>G@I3"drJs!ipF1F^^LgbVf68)u(?n^9\/T=7ZTu]?/o<u,W&@lc*4!W<J]OoIoNe0N+G<nE%DZ1p!eKONroFkmVl1]ER@%+>&,dlSKO>/E9;+b=B=ptRNT)LP."\l<YGUl+l=jIl].$N_,'Fq`.jcMCkD5>O2HpQOY]9?nbbP^NV%Y[G/!iPqurE;l_FM`-YB"#0gfh-]7pMHJT>[L_m)MkG'-1(!m@*]e4TM8\X"XRLfor2pg+UN8%T;/CllVu4=>1O$Sh#-=BN+4p?,%Hj]Q43[5*FSosA2nSOY/2Q3YY&Jrt<3):_Um+GPTZ5d9aH:`$P*X2n7+SY;+f,fr+>!b\`582<XB/!!Rmg:]?g!>>&HV-o^R/iqV%&cGCRL7Jg=OCfXrJqK_mWO(dk#7-Vi`2]s2R32@1@WH(#5jd-B4lQ`6+(Fr%(A!HEU4.*7?R=KT#GRf8iN@.1->AE^WD:1*.J4"e%Dl$&-(1X_X.!*L?=ED5^=79eu?4)M`B^t50oUm4c$n<^6\`5D"c/UpMm!,>drO<i.nC[23P5G"4mU((*geD8M^j7KaGDqT?mW_,>%"%DX=7oIF(bOJ-_hAV85*Z8OO@_EbBTUKSMY1#EQ8M-Mda.nF@DW3rD*W`C&M5MSN4m_18:.Oq"l+JlK8+\XGi6O^qWTK]1Ol6i0%ZFh@O&MBOQLF1hn()@_I2\eR(4<P_>LNu.JoJi^f1K-31'8E%C8",>AEt[;gH;Ntg$=IMBf/hD("-H?^eNk(KRj/P$W9`SUhgkq_%>\aG2`m#Y5_3C\WkA":0&+\D-NO[BmTH02qXAjC7l:8`QYNi>L_8Wqq8Tl9%NKni3],KfphY'FeerKFCdW\92hKpIN>]07)%E+Cb%hWRJQNl_O$H9EW#![?.BXdX;RN[uIWnmDLm`jq<XcEV9][.>.O#c4;!o94IH,:LBm;Xf8tpL$6H<.@lc8/@\qJ0I"_Y+K.o::B3t%l89,dBZm);)/#@N[a(p)bYqot*60aqFiC%kW'Wk*=/Q/0$4bukDNrlc,Z,=OAfa?]!e(=^5fI*!&3Mn3>-H`kk9V\0EVU+AatZm&%E(p<;;!Zr?C'B)R;<0X8;_*U0#_:M!paGLs6JAng[*IN'bkI$KDW<Tn^Dm974thBn`#l,'3Q>Z5eEXf#\^#!0JEI32*kP.!$9DdV%?u4Y'RA+G=l#RC/(GnqDhg#3E>JkfO`Fs3Hfq0Fe8@S+<i2\5J/?+l4-4,VV,rhn02;ViMFg!q4B4O2XorI(1$"t<,]lLuol(,p6%WB8edG!L[R;S.'R(hqcq'F4rdj3iiVo:=EdKU"e,"'dgX\lK$1J`cGIcn#8s\k,YgFrk-7_S[n?]&u=;0CH<2X[iZhbW/X(K9?>m%ro1`(^OYE"osrn!ImN4K4r%(=ImLXH7_eBi,rMse]9NNn+[jmf<a;Y$?<k5qfJD]>NXZ1$`$D_\)[oUSL!oo(P=Wn5r!)2S]tnO3%M319a0jXt<#33M0_'JMHc%T]a#Y)=Rkq5m,>fD;.5&!:6#(pSQ]>3bB#*FX[p/`1AJd@E"Fd:`j*432B%JjefPa1>Fctt-BR:;4r%#F<loF[%%Io=,$PT)&V-1.^JM[-fjjLd>W?\&fb<UT*/6-GtYolO=;d:;nkT'TFf,f?8A_3mSV0G+"!d>;9K/RD^?s*df<5lp,oa%8XTVTDNdZI!UFll6%JLZ.(RA@>.LJF*uZ,UDDk*6mcp-C/+R&k+5doeANSJ4caK3/K&#@p(q:+/Fa%^X%bb.2#5p<egI9m5PKEC^%24C-ii&R3fnE/DV\/mO:!'L+F0q?idp`Y6ll'uX7rsXmlZ&r:Rp+.ZU<Y.'ml#s8O+aI,_pKNl7Ke^NhB1Q`a=NQ.W9RuC_br8Uh%U?FiH+k-3s7*#F%I;4-:Ssg]eAD*Ua2msMr5p1*EYCTI&H,p`p#"p8q9g-G#^a&Ol&F",2C%af0.0uWEq2j.Un!)?W0$;TYNmAPN%>eW9IhL(2n9$[JGl_#h?6b?_"F2CWg(sA3K@@g%0`9$ff2m!;m#c&t<'hb%jQj.==T[;gY3'd_LQqFr0C=b`Y:e".Pj)PMqEi@Fb%If(C&aV$81LJl&+Dk$Cpn-*1OfV\`2LMURrg(cbYGDu0N54&2-E\8/ADp]MGK+8^iE4ZlEkiWP6_dgC__oUHS(b@,HKKHF$C-,QN%]tP<+9Y"t:Kt^k7;T*8u(R$HQ43O#+)\,>EDJ8Jq)t^hURi?8)Lddj)?/?f-OPV2js-+.+HA0.Yp5mFAH]J.83hlRsM35$cI0:+V%,FnK6M<n\.!t`.9#apRd]LT,dH"1)FHB7jTb^3n#k]S"eD4BB,Xp<E+`:\5!O#W!_n$_#qHfTa*nQKL.dd;?Lr:<H<]@7&@1u-%l%Je,j=8I/erq[e2f(\m2oDi!3:[94FM-&rDg@k,a!4@\hKr2,hO(pW&;FQ')Zp<Z\YHdJ"tXK?-ah+Q(H?`daOThHPMJg8OB7=$1P%d,V-[,3=3^3VVKk?G^8Nd9jX`ag/+[Fl][eU@oEHZV5f-[)XS"_mFq\H&S@91&K-C>B88^.#pM5a5pW3i@bh0\g=BVXgGJ`a4YrR%JD:JE6mm35$`Q42aAO$?bV[ACWi8"%5IiYlY%^gUN"1Nh0%U6MY+si%]b'A'kPP62IbUW'6`<#"E6J+!1rgZ-RU_@YR<EX$V`:P:%H8Y5FC$mgu4j6uh>BFu33)%(F/@-&9rZ')jaG>2lf^\Td@u@gq"K6t"-;XfgG>LDD$%Pc3oQ_a6G6D@dWp]_qm;5&/h#2fl!qE"B%k'fOk6U(@&[oo-!@p4%QZrfdm%c(RN*Te2[89a2=`&;/s@9gWiG3D#i:j?#LZ\/67L1qOJ7T'7rR:saRPds*m>'-,`""@M(Uth0I%W"-%f4D>pWQjZ"n']VL+&[coe6Ap[^!NjdK!PkKD(n>bkgHj8$>^WpL#!:?-XN$((V9"N67(@DomN?T\j:G8MBAXm$]R?YY(g7f3%.8Fnm;I+gnZ*j[1D/it$I)A@V4&Age0T+5E85b5Va:2#pNpYcDmlHliX`;eU6V:i<D!!5P#5s[]/i2EAXO94jd-u)I&?]l$"Ss'Z%LXZ3ZR^'![b^=GMombsf30(P&CeGVLU"FRCa$'a-bbmh%],e[1n`-8#L?4^Rm&T'sn.<;"qOC[mJp0eM#d95MD-Aj.)PYX%$cY19%SK5^!d@$Fh?P#<=;sZ\Q$nZUkq6AWa\%qA;ac5&^8O8;:BIJk5"5ufW=&W'6C:9sc+K$QZ&uL0+H+[2TdGC%gqjORn\)iN>idN:n%2!2kodY9o2bf;.VP@B?mJUfM^g+4<n5b/DAcH"%ZbK#HnAMfrQ:6G2-jg#2e.FM))9s@]Ac@:VMs2E/1_S`*APF?bW!K;0451.O[%d*_"<:+mt"D(d7I/oMoOFgY^oN$!Z6j`E(l?;:LlB]`!)B`h/t4Nbi_fY68e=/7u9?3+,[I.7I"noSp1FEO<km<l1*4.p[045\<5%$",42X+7?JJAsWjCsLh\/U&BLp^Qqt91,M!_8SD`NgY]:q;b!l"e$3>\`CarT46P7n:Uk+VC)s]EZMGJEZJa%\ZEosroT<c+,iie%.u.@d/?F%I4`\sJE-8oa2pJYoDPZ:O^M(4a`&r6`HK5,GBmMDQ+W&O9V+tM,*HE#oes#L\FNF.%ElbqGk'W)Y.BW4oR&6F=*k?en%3c&9P,FA?>F8D7o0#0NF%YYt7&5%f4?P*1gmlMbB=%^#N#L!!bXFs5!+L@7aO'KhFoXPQbqZroXk&8ZmQ]_a*&&LGLYFp1%ZER)U%l&c@PK]smMQWudb6Zk#lBO-m\EOt5:>BYp2;u1Cs0>"W]0$>Q-&_J[[hc7b.PrdIN\6s'F9Ja8jjC6p0;H(FW(J(RT>!\3SNjl!S%Q:ij,?tRLAP3YDTac41^@)&*^\No/1ei%TkKc$%YBY!2%1-Jo\?h`Bk*`n.im,fb)F;@r>3X\D:H;+Nm`14V<@f`fuFRtoGCJBLO%,1d'DZ)t82fXki<W3?7W9S76jM^r<FJ1J]Q]?3fSiI5hu/6pr,_I@^sl60Cs\%Z<C@t1m4B%i+IP(i,Q[Ng*`WWYNH,Id,j%bsR=%/,g*mf2eCH&tU`9qL]aBl:__W3YTkflC0gjO^;uV(/:>+0\*/tV`HWM%)(Y@pbkpP#,cHh_]seL:[.]rr8Y+bB-q/e$.I2%"Q.7M%@<H<G0EhG6Hi0?odmHd!ks-n?GdmD:)X-:B.rm+`i;*)WW\+>G38HG=(lm\i@erdj30/uI/EB;2'7\AK4Kc]g'OXt/#!2$*4gajL%%WpO=T,c0pIs;'D#uZK8rgc@",o.PW_/aZ@A:aT</83siJf(BVmZddg_+r:,H,/eo!j"jO$2X`U9n_Te"sXInLC8DO-1aD$')ruR%`)(%H8eFhT0EdW8lW8A,'&iNePEKf#F8-<r1*bgE>'hO\Q6P1impO9?$<?<k1E7Cp&9to`/&U;baOQql_0m1=f/A;Vh2$X<GDKeu%p0E>%3[!Pd<C<c1H!hZP]*]#8TJurd_4F#MetFU9i8q,9'4b"]Y4%B]:^*g!TE?`3KQ<<PHLAp+9T\3Y(bSS99U=^P?!sP;N5RK;%f(]C.ObJq<Pp(O&D#e%V9*Q9"dKCT4KLA`N5q&#ViXXh(32)#k.-WUp"qXt`X>uFqF_ZM0.n9es$p89mef)i)R3<^*B&McS'ZYpC%gOhF1HIB*=L`YPu$b?.Rot3Ujj,/;6Jn-U@T9.sKH%_Bp)soe5GRX([+2astA"KYf+peHsJg?as`(4>H@0Y25&%i3?]M3V9r>cjZ%WEoU&"bWnlE\>&`^m*EkS-uZ6W]BRL%-&f[>./T>LCBgb?Aib;K5^`&$]`FMb,ALM$<<%rUVLSEnZR1'ET;^;n;Lc0j<+Psll>3L%l3]u!<=p!h:*kU6i>UI'TS#;>M-*k1Fdr9/#'.FkFU_Q>]gZ^>9#mH,eV&e?"B"&fWT?m2?5t!f>J_!8\mHT["K3_N@ZYQ@-mCQ\%Rj-Yid4hSX9cRI%+1I2jCr1n_'q0IV.L8Xkr`I)nZgf?=`<q7TND(?V-L_UabD;<#SVWK3qk<c.^er[n-T@3)BcTM!"aBnfU^t#?%([+LY\!>+oREIT%^gV>71q54[jpW*8?irs[5@$OYTbg?:0p6Bg8k(Of%!e"L\.PE)/g]lU#8i.+E@7g.4q/&afg`WG)MmF-'$>]*%@7FtF2R'FX0ePZt'.<_lGM>`A]BSZIi6'^aI7H9P$fl7oX/j_]LM[ZLbT@kYB(e7L3Bu3,2O>W$p<eS#k5&`73MSuf]9psg4%6ci%jM)q!m?j.J,t@;cfZqE`:=4USjc)\0b,%7%S=[6D4;cN^D*t1gPchpk5QiOfpPPS\_+pO'OeDp]^tB4!FD+0-_)_P*/QW,WB02P\%AO,c,D1a*c_AU,'@glkPh`PJ90$rn)#._,thA;IA81;R-O=kQ480Q/eEcRcqm6IosL"SK>cT!io.^ED4St(k/'0J4<r-f"_Ei0<#%"6&*+@AXq-5.AF*8l&0!mCc#uTUD]i+^1&QJjm;pfrUn*D/`s<\Ue2En:["31ugoA>?DFTFhXl6'q?Cgml1^EH>;7gL5Gk3c!?Dt%"%-7Y.Xd'Wq-i0O;B?8EbUM7^BeWs[^%3@QNf'[KK-pe+pSeRZ;PYI`DZs*(`c9fiBWk'qn*nh<P#cH<9O^Iqn=66u(+ge:'Qae]%>AIh3nP%+RpPb9<d%T6k.Om,,H#P;3Y*NKd8S_"W%OS!hcI$Nrl3_AlT2O/^E8fj"f5,@cHEn,5[MP0CEJSj7;j3"6!OTonTN%l`%\lcK<[4`YIr_tB0pNOi3)QYio]7\3u?L.##_5H)PZP,4NJ/+K_Ym2HGL_E$;j4%Gp^js-e`_YI!g6crZQ$JFh8PO(GV9A5?>:&^M%K'd+j0U&_M@d)`\4FreMPfME+qu!*Na0dUqhM@L?KDJC\>U0O]b*^GEiWb&8C<5"6lQC%/iXL_0p6]\+,!d53jDR>'WfLq2+1-&C%ZOU*,FRVXX3YZ@R+;SG=4XFV;G(c%,["lm0WAjnn0eJn_<A?pKR+;3&h7T[TS@$A2.`K9_A4_HKbc[>p@"EW5d;ZI<SRW"RA0Fp6%&T1GS3,S..Y-,H6O#lfY'2cioi6<Yfk(b&NNCSATnP'g6nNc:Cao*8j:@Pa-lPrnK2Y@\9NM8Wu<NiP.h!3(Fm(PbAW4Cg3$aIU,%gb=hY'"ThbngYYZnRVr6b:6Z+@0a@cL2&iJ=$S,YGk;dU'mjo@W6%UQ)i'+j+CUKbLbHk3JcVrTomllEFsrVhT)!ujQP-7-Fl<8\%-/445UX;X&>B8Wr_*CbT;6IgG6!s:9r><F-0>lS5Ntfd<TY4c6=t.B2Jp_%Fp?IRN!j3EP]D)AP+Hc3]\1SXY)On<Gb@>#J;)K0a%F'BQd5[-KEFXBi;@rN/`6gfIpNM]K`^0+FV'NT*pFV7g1SSI)JZ9UF^O.k@3J?jDiR!]36Ol-LUAejSIU*@\dd`=AZ'\:Z31^(pt%.2N/\UX*`1^kL^'7?<W!j`sTur'Z'nN,?&J!=l'+A;crTT._GnXeV:VjSZ-qn&h#$P(GY#6D;_ZF$B6?d?o$*(TH>`SU7sL_9-mZ%H:S6_goU:0geN#1DaiesW'$FYLIrnhhZ/nHp/GSgLk9Z<C.JWtM'_cK4t>@!JC#GI8>%a[]W]AW?2c@#5MM+*V^NYS_9>W(dK,7A%<+K-81O)*''0Mo:>o!Xr-htoC&As,s]oT`t$]ES5q!B><3'$H3d55LCR_g#R9\!CJZ547QW3a+uEL>?sXk)$#$p!2[2_ljnfs-kq%@q7k3gST#]J4^JMai>"[Xdb1f#4O[5Fmce6R0)R51e_ojp&REm?>hiu:L%Et('#]oGi["md#7.+3I4Iqk\oVoD\#PQ9!:K]\f0]o%*,g$\^F:P[IcA7J:Fpug'0qnu;S?Cf\Tl9P_PYpR-)8>eHjB)RfIjR_)_><EZbf]j7,KilC`UEm'g/kQ$6*5b"k=Bh;_.&jk8Vt$%$>S>bC'>naC0n$XT%<<e#j14#L'OL?El$uT-sdelS6eM!:qU+CO4DZ/4;cOYlik':r!P-pm6KnNkg*Lgf.3M<LL$[@?3-^.EgL)5%%_%kk`MG<Yj1R8WO?tD8WuIFIl=eRZ(-Jt8ZGEMC?tFIEfVgRpU0j>m2GW,Jqn't71,TI+l$ObF@NgX#BfO)KQJ,4f4HSujlOt+F%HF9lRiaMZI!q,FsNYQiP#5[Ejf<TS+?,GKl7XnOUUTW5O%aT=Nd6!BaCf!Wb.eq[^Dbs,FL%4"?\*@I<UnNk=&.Vl\TFU<DjT2+%%-kEunL*HQ\&/,>0GB3fP]JPDCrCC\mW,pRk\AA<)Z.W27((eupUYFAL5VWL&UD.f<'rh$0oq)+694!A5p.7a%m6:8ONm[HnJb-%"%qBtn_pG0tc0ImWYJo^+8VQr#i&?c.g'!`s,m)4_dO[3D*:WhCgp969F-@Kh0I$T>shF"fWXJ-Z0F[EL\pH?u,nQ2Wki6Vg"gM41A%L/nQQ+B<o67Scst>d9nR1>,aqHU1pZLiA?q-/DgM5rqo`c$^Dr,=b;mN-qL0e^:E<rM(jldt,+j]Ys/7o)SCjBbc+$*-*T3PCdIr%aQoQB#A7,L=e"Vd(cQB"!<W!LAQ/Jn?XDjQS/.oSS#Sd.OZd<"AGUbB*lREdb_;-i?!MP`\5Jh)eUEF"jFjF>.)DIqM4)*?.^G6W%o]UQ<'?o8<g9R^JUE(3Tj0@gF]BmT[>^#0V`YVS&d#nf.mMkKC78iiY"uSb'YYj#?Jm0$p/7.pZ+D/oTeie\\G_EJPq$smL?mcg$%aad9VH3c;P"0>qT$OEmZM*"Qiq`#&,=3(fl*]-5>Tq`Gm6ZUVOZ3i?S1;KEW_&7u<N`SjH)%F]EkNK,r@><i2iet@6d?4o/]M?Y5%$n8#^L`)@!h_LX+U1d(%F@<`Ud#K*VX*<<oc&U!STn$g_,@fq-SZb00OTDk(^b[ceP`9QEo?]6X8RAOJN-p?'N9ihd,P)^f#<"@n%PD+[(d5=!@Z]`gPcopSH"on;KS9?g\C=Kq.=i3R-&-!YZG(OFTBgsGuI??j0R??_hQ)2ta1G\p4b-8l3/kS*?*nE0ss5LA+la!)8%m)\8>n+._R[kcV#Vg4XK3nngO6^=(%3Qpa<.FO1!M3P^IQO>-H'Z-;BL[!UGG;Oa%O[2&aVcGUlbfISO$.I,>>g3TnSn;LD/Mlr4%U`#S'*N!\0<b0d"[uP#gk+LjN$C2JCkJ+_!BgcP<'^`2ca8kJgr66u@U[LfA^Pp5JUtM]4&Xd,^H8IE%A,%5mMj=sChKWItW6C-X%Yn(!(,dS\%:B=X]mgk/>R?hX:QTtN+]3kO(Dp/1Wq]C:er8HPJqrsSghYl_@s6[]G^AFh#5(*D#]:[sYiD1Qpot0r?IeWqXNkYDR%o3^ASiMZ/Do]I<GqX4<SrqPNg!BH(^c[YVg^]1M;jk]q=6:c/t~>%AI9_PrivateDataEnd